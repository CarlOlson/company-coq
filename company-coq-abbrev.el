;;; company-coq-abbrev.el --- List of tactics, auto-generated from RefMan

;; Copyright (C) 2015  Clément Pit--Claudel
;; Author: Clément Pit--Claudel <clement.pitclaudel@live.com>
;; URL: https://github.com/cpitclaudel/company-coq

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:

(defconst company-coq-abbrevs
  (list
    '("Theorem @{ident} : @{type}." . ("14" . 9))
    '("Theorem @{ident} @{binders} : @{type}." . ("14" . 9))
    '("Lemma @{ident} : @{type}." . ("14" . 11))
    '("Lemma @{ident} @{binders} : @{type}." . ("14" . 11))
    '("Remark @{ident} : @{type}." . ("14" . 12))
    '("Remark @{ident} @{binders} : @{type}." . ("14" . 12))
    '("Fact @{ident} : @{type}." . ("14" . 13))
    '("Fact @{ident} @{binders} : @{type}." . ("14" . 13))
    '("Corollary @{ident} : @{type}." . ("14" . 14))
    '("Corollary @{ident} @{binders} : @{type}." . ("14" . 14))
    '("Proposition @{ident} : @{type}." . ("14" . 15))
    '("Proposition @{ident} @{binders} : @{type}." . ("14" . 15))
    '("Definition @{ident} : @{type}." . ("14" . 16))
    '("Definition @{ident} @{binders} : @{type}." . ("14" . 16))
    '("Let @{ident} : @{type}." . ("14" . 17))
    '("Let @{ident} @{binders} : @{type}." . ("14" . 17))
    '("Unset Printing Records." . ("16" . 20))
    '("Add Printing Record @{ident}." . ("16" . 21))
    '("Add Printing Constructor @{ident}." . ("16" . 22))
    '("Set Printing Projections." . ("16" . 23))
    '("Unset Printing Projections." . ("16" . 23))
    '("Test Printing Projections." . ("16" . 23))
    '("Set Printing Matching." . ("1c" . 24))
    '("Unset Printing Matching." . ("1c" . 25))
    '("Test Printing Matching." . ("1c" . 26))
    '("Set Printing Wildcard." . ("1c" . 27))
    '("Unset Printing Wildcard." . ("1c" . 28))
    '("Test Printing Wildcard." . ("1c" . 29))
    '("Set Printing Synth." . ("1c" . 30))
    '("Unset Printing Synth." . ("1c" . 31))
    '("Test Printing Synth." . ("1c" . 32))
    '("Add Printing Let @{ident}." . ("1c" . 33))
    '("Remove Printing Let @{ident}." . ("1c" . 34))
    '("Test Printing Let for @{ident}." . ("1c" . 35))
    '("Print Table Printing Let." . ("1c" . 36))
    '("Add Printing If @{ident}." . ("1c" . 37))
    '("Remove Printing If @{ident}." . ("1c" . 38))
    '("Test Printing If for @{ident}." . ("1c" . 39))
    '("Print Table Printing If." . ("1c" . 40))
    '("Arguments @{qualid} @{possibly_bracketed_ident+}." . ("1p" . 49))
    '("Arguments @{qualid} : clear implicits." . ("1p" . 50))
    '("Global Arguments @{qualid} @{possibly_bracketed_ident+}." . ("1p" . 51))
    '("Local Arguments @{qualid} @{possibly_bracketed_ident+}." . ("1p" . 52))
    '("Arguments @{qualid} : default implicits." . ("1q" . 53))
    '("Set Implicit Arguments." . ("1r" . 54))
    '("Unset Implicit Arguments." . ("1r" . 54))
    '("Test Implicit Arguments." . ("1r" . 54))
    '("Unset Strict Implicit." . ("1s" . 55))
    '("Set Strongly Strict Implicit." . ("1s" . 56))
    '("Unset Strongly Strict Implicit." . ("1s" . 56))
    '("Test Strongly Strict Implicit." . ("1s" . 56))
    '("Set Contextual Implicit." . ("1t" . 57))
    '("Unset Contextual Implicit." . ("1t" . 57))
    '("Test Contextual Implicit." . ("1t" . 57))
    '("Set Reversible Pattern Implicit." . ("1u" . 58))
    '("Unset Reversible Pattern Implicit." . ("1u" . 58))
    '("Test Reversible Pattern Implicit." . ("1u" . 58))
    '("Set Maximal Implicit Insertion." . ("1v" . 59))
    '("Unset Maximal Implicit Insertion." . ("1v" . 59))
    '("Test Maximal Implicit Insertion." . ("1v" . 59))
    '("Arguments @{qualid} @{name+} : rename." . ("1x" . 60))
    '("Print Implicit @{qualid}." . ("1y" . 61))
    '("Set Printing Implicit." . ("1z" . 62))
    '("Test Printing Implicit." . ("1z" . 62))
    '("Unset Printing Implicit." . ("1z" . 63))
    '("Unset Printing Implicit Defensive." . ("1z" . 64))
    '("Set Printing Implicit Defensive." . ("1z" . 65))
    '("Test Printing Implicit Defensive." . ("1z" . 65))
    '("Set Parsing Explicit." . ("21" . 66))
    '("Unset Parsing Explicit." . ("21" . 66))
    '("Test Parsing Explicit." . ("21" . 66))
    '("Canonical Structure @{qualid}." . ("22" . 68))
    '("Implicit Types @{ident+} : @{type}." . ("23" . 69))
    '("Generalizable All Variables." . ("24" . 70))
    '("Generalizable No Variables." . ("24" . 71))
    '("Generalizable Variable @{ident}." . ("24" . 72))
    '("Generalizable Variables @{ident+}." . ("24" . 73))
    '("Global Generalizable All Variables." . ("24" . 74))
    '("Coercion @{qualid} : @{class} >-> @{class}." . ("25" . 75))
    '("Set Printing All." . ("26" . 76))
    '("Test Printing All." . ("26" . 76))
    '("Unset Printing All." . ("26" . 77))
    '("Set Printing Universes." . ("27" . 78))
    '("Test Printing Universes." . ("27" . 78))
    '("Unset Printing Universes." . ("27" . 79))
    '("Print Universes." . ("27" . 80))
    '("Print Sorted Universes." . ("27" . 80))
    '("Print Universes \"@{string}\"." . ("27" . 81))
    '("Print Sorted Universes \"@{string}\"." . ("27" . 81))
    '("Set Printing Existential Instances." . ("29" . 82))
    '("Test Printing Existential Instances." . ("29" . 82))
    '("Unset Printing Existential Instances." . ("29" . 83))
    '("Module @{ident}." . ("2c" . 85))
    '("Module @{ident} @{module_bindings}." . ("2c" . 96))
    '("Module @{ident} : @{module_type}." . ("2c" . 97))
    '("Module @{ident} @{module_bindings} : @{module_type}." . ("2c" . 98))
    '("Module @{ident} <: @{module_type<:+}." . ("2c" . 99))
    '("Module @{ident} @{module_bindings} <: @{module_type<:+}." . ("2c" . 100))
    '("Include @{module}." . ("2c" . 101))
    '("Include @{module<++}." . ("2c" . 102))
    '("End @{ident}." . ("2c" . 105))
    '("Module @{ident} := @{module_expression}." . ("2c" . 109))
    '("Module @{ident} @{module_bindings} := @{module_expression}." . ("2c" . 110))
    '("Module @{ident} @{module_bindings} : @{module_type} := @{module_expression}." . ("2c" . 111))
    '("Module @{ident} @{module_bindings} <: @{module_type<:+}:= @{module_expression}." . ("2c" . 112))
    '("Module @{ident} @{module_bindings} := @{module_expression<++}." . ("2c" . 113))
    '("Module Type @{ident}." . ("2c" . 114))
    '("Module Type @{ident} @{module_bindings}." . ("2c" . 115))
    '("@{assumption_keyword} Inline @{assums}." . ("2c" . 118))
    '("Module Type @{ident} := @{module_type}." . ("2c" . 121))
    '("Module Type @{ident} @{module_bindings} := @{module_type}." . ("2c" . 122))
    '("Module Type @{ident} @{module_bindings} := @{module_type<++}." . ("2c" . 123))
    '("Declare Module @{ident} : @{module_type}." . ("2c" . 124))
    '("Declare Module @{ident} @{module_bindings} : @{module_type}." . ("2c" . 125))
    '("Import @{qualid}." . ("2c" . 126))
    '("Export @{qualid}." . ("2c" . 127))
    '("Print Module @{ident}." . ("2c" . 128))
    '("Print Module Type @{ident}." . ("2c" . 129))
    '("Locate Module @{qualid}." . ("2c" . 130))
    '("discrR" . ("30" . 120))
    '("split_Rabs" . ("30" . 121))
    '("split_Rmult" . ("30" . 122))
    '("Print @{qualid}." . ("3t" . 124))
    '("Print Term @{qualid}." . ("3t" . 126))
    '("About @{qualid}." . ("3t" . 127))
    '("Print All." . ("3u" . 128))
    '("Inspect @{num}." . ("3u" . 129))
    '("Print Section @{ident}." . ("3u" . 130))
    '("Set @{flag}." . ("3w" . 131))
    '("Local Set @{flag}." . ("3w" . 132))
    '("Global Set @{flag}." . ("3w" . 133))
    '("Unset @{flag}." . ("3x" . 134))
    '("Local Unset @{flag}." . ("3x" . 135))
    '("Global Unset @{flag}." . ("3x" . 136))
    '("Test @{flag}." . ("3y" . 137))
    '("Set @{option} @{value}." . ("3z" . 138))
    '("Unset @{option} @{value}." . ("3z" . 138))
    '("Test @{option} @{value}." . ("3z" . 138))
    '("Local Set @{option} @{value}." . ("3z" . 139))
    '("Global Set @{option} @{value}." . ("3z" . 140))
    '("Unset @{option}." . ("40" . 141))
    '("Local Unset @{option}." . ("40" . 142))
    '("Global Unset @{option}." . ("40" . 143))
    '("Test @{option}." . ("41" . 144))
    '("Print Options." . ("43" . 145))
    '("Print Tables." . ("43" . 146))
    '("Check @{term}." . ("45" . 147))
    '("selector: Check @{term}." . ("45" . 148))
    '("Eval @{convtactic} in @{term}." . ("46" . 149))
    '("Compute @{term}." . ("47" . 150))
    '("Extraction @{term}." . ("48" . 151))
    '("Recursive Extraction @{qualid+}." . ("48" . 152))
    '("Print Assumptions @{qualid}." . ("49" . 153))
    '("Print Opaque Dependencies @{qualid}." . ("49" . 154))
    '("Print Transparent Dependencies @{qualid}." . ("49" . 155))
    '("Print All Dependencies @{qualid}." . ("49" . 156))
    '("Search @{qualid}." . ("4a" . 157))
    '("Search \"@{string}\"." . ("4a" . 159))
    '("Search \"@{string}\"%@{key}." . ("4a" . 160))
    '("Search @{term_pattern}." . ("4a" . 161))
    '("Search @{search_term+}." . ("4a" . 162))
    '("Search -@{search_term+}." . ("4a" . 162))
    '("Search @{search_term+} inside @{module+}." . ("4a" . 163))
    '("Search @{search_term+} outside @{module+}." . ("4a" . 164))
    '("selector: Search @{search_term+}." . ("4a" . 165))
    '("selector: Search -@{search_term+}." . ("4a" . 165))
    '("SearchAbout @{qualid}." . ("4a" . 166))
    '("SearchHead @{term}." . ("4b" . 167))
    '("SearchHead @{term} inside @{module+}." . ("4b" . 168))
    '("SearchHead @{term} outside @{module+}." . ("4b" . 169))
    '("selector: SearchHead @{term}." . ("4b" . 171))
    '("SearchPattern @{term}." . ("4c" . 172))
    '("SearchPattern @{term} inside @{module+}." . ("4c" . 173))
    '("SearchPattern @{term} outside @{module+}." . ("4c" . 174))
    '("selector: SearchPattern @{term}." . ("4c" . 175))
    '("SearchRewrite @{term}." . ("4d" . 176))
    '("SearchRewrite @{term} inside @{module+}." . ("4d" . 177))
    '("SearchRewrite @{term} outside @{module+}." . ("4d" . 178))
    '("selector: SearchRewrite @{term}." . ("4d" . 179))
    '("Add Search Blacklist \"@{string}\"." . ("4d" . 180))
    '("Remove Search Blacklist \"@{string}\"." . ("4d" . 181))
    '("Locate @{qualid}." . ("4e" . 182))
    '("Locate Term @{qualid}." . ("4e" . 183))
    '("Locate Ltac @{qualid}." . ("4e" . 185))
    '("Load @{ident}." . ("4g" . 186))
    '("Load \"@{string}\"." . ("4g" . 187))
    '("Load Verbose @{ident}." . ("4g" . 188))
    '("Load Verbose \"@{string}\"." . ("4g" . 189))
    '("Require @{qualid}." . ("4i" . 191))
    '("Require Import @{qualid}." . ("4i" . 192))
    '("Require Export @{qualid}." . ("4i" . 193))
    '("Require @{qualid+}." . ("4i" . 194))
    '("Require @{Import|Export} @{qualid+}." . ("4i" . 194))
    '("From @{dirpath} Require @{qualid}." . ("4i" . 195))
    '("Print Libraries." . ("4j" . 202))
    '("Declare ML Module \"@{string}\" .. \"@{string}\"." . ("4k" . 203))
    '("Local Declare ML Module \"@{string}\" .. \"@{string}\"." . ("4k" . 204))
    '("Print ML Modules." . ("4l" . 207))
    '("Pwd." . ("4n" . 208))
    '("Cd \"@{string}\"." . ("4o" . 209))
    '("Cd." . ("4o" . 210))
    '("Add LoadPath \"@{string}\" as @{dirpath}." . ("4p" . 211))
    '("Add LoadPath \"@{string}\"." . ("4p" . 212))
    '("Add Rec LoadPath \"@{string}\" as @{dirpath}." . ("4q" . 213))
    '("Add Rec LoadPath \"@{string}\"." . ("4q" . 214))
    '("Remove LoadPath \"@{string}\"." . ("4r" . 215))
    '("Print LoadPath." . ("4s" . 216))
    '("Print LoadPath @{dirpath}." . ("4s" . 217))
    '("Add ML Path \"@{string}\"." . ("4t" . 218))
    '("Add Rec ML Path \"@{string}\"." . ("4u" . 219))
    '("Print ML Path \"@{string}\"." . ("4v" . 220))
    '("Locate File \"@{string}\"." . ("4w" . 221))
    '("Locate Library @{dirpath}." . ("4x" . 222))
    '("Reset @{ident}." . ("4z" . 223))
    '("Back." . ("50" . 225))
    '("Back @{n}." . ("50" . 226))
    '("BackTo @{num}." . ("51" . 228))
    '("Backtrack @{num} @{num} @{num}." . ("51" . 229))
    '("Quit." . ("53" . 231))
    '("Drop." . ("54" . 232))
    '("Time @{command}." . ("55" . 233))
    '("Timeout @{int} @{command}." . ("56" . 234))
    '("Set Default Timeout @{int}." . ("57" . 235))
    '("Unset Default Timeout @{int}." . ("57" . 235))
    '("Test Default Timeout @{int}." . ("57" . 235))
    '("Unset Default Timeout." . ("58" . 236))
    '("Test Default Timeout." . ("59" . 237))
    '("Set Silent." . ("5b" . 238))
    '("Test Silent." . ("5b" . 238))
    '("Unset Silent." . ("5c" . 239))
    '("Set Printing Width @{integer}." . ("5d" . 240))
    '("Unset Printing Width @{integer}." . ("5d" . 240))
    '("Test Printing Width @{integer}." . ("5d" . 240))
    '("Unset Printing Width." . ("5e" . 241))
    '("Test Printing Width." . ("5f" . 242))
    '("Set Printing Depth @{integer}." . ("5g" . 243))
    '("Unset Printing Depth @{integer}." . ("5g" . 243))
    '("Test Printing Depth @{integer}." . ("5g" . 243))
    '("Unset Printing Depth." . ("5h" . 244))
    '("Test Printing Depth." . ("5i" . 245))
    '("Opaque @{qualid+}." . ("5k" . 246))
    '("Global Opaque @{qualid+}." . ("5k" . 247))
    '("Transparent @{qualid+}." . ("5l" . 249))
    '("Strategy @{level} [@{qualid+}]." . ("5m" . 251))
    '("Print Strategy @{qualid}." . ("5n" . 252))
    '("Print Strategies." . ("5n" . 253))
    '("Declare Reduction @{ident} := @{convtactic}." . ("5o" . 254))
    '("Set Virtual Machine." . ("5p" . 255))
    '("Unset Virtual Machine." . ("5q" . 256))
    '("Test Virtual Machine." . ("5r" . 257))
    '("Local." . ("5t" . 258))
    '("Global." . ("5t" . 259))
    '("Goal @{form}." . ("5w" . 261))
    '("Qed." . ("5x" . 262))
    '("Defined." . ("5x" . 264))
    '("Save." . ("5x" . 265))
    '("Save @{ident}." . ("5x" . 266))
    '("Save Theorem @{ident}." . ("5x" . 267))
    '("Save Lemma @{ident}." . ("5x" . 268))
    '("Save Remark @{ident}." . ("5x" . 269))
    '("Save Fact @{ident}." . ("5x" . 270))
    '("Save Corollary @{ident}." . ("5x" . 271))
    '("Save Proposition @{ident}." . ("5x" . 272))
    '("Admitted." . ("5y" . 273))
    '("Proof @{term}." . ("5z" . 274))
    '("Proof." . ("5z" . 275))
    '("Proof using @{ident+}." . ("60" . 276))
    '("Proof using @{ident+} with @{tactic}." . ("60" . 277))
    '("Proof using All." . ("60" . 278))
    '("Proof using Type." . ("60" . 279))
    '("Proof using." . ("60" . 280))
    '("Proof using -(@{ident+})." . ("60" . 281))
    '("Proof using @{collection} + @{collection}." . ("60" . 282))
    '("Proof using @{collection} - @{collection}." . ("60" . 283))
    '("Proof using @{collection} - (@{ident+})." . ("60" . 284))
    '("Set Default Proof Using \"@{expression}\"." . ("60" . 285))
    '("Unset Default Proof Using \"@{expression}\"." . ("60" . 285))
    '("Test Default Proof Using \"@{expression}\"." . ("60" . 285))
    '("Set Suggest Proof Using." . ("60" . 286))
    '("Unset Suggest Proof Using." . ("60" . 286))
    '("Test Suggest Proof Using." . ("60" . 286))
    '("Collection @{ident}:= @{ident+}." . ("60" . 287))
    '("Abort." . ("61" . 288))
    '("Abort @{ident}." . ("61" . 290))
    '("Abort All." . ("61" . 291))
    '("Existential @{num} := @{term}." . ("62" . 292))
    '("Grab Existential Variables." . ("63" . 293))
    '("Undo." . ("65" . 294))
    '("Undo @{num}." . ("65" . 295))
    '("Restart." . ("66" . 296))
    '("Focus." . ("67" . 298))
    '("Focus @{num}." . ("67" . 299))
    '("Unfocus." . ("68" . 300))
    '("Unfocused." . ("69" . 301))
    '("Show." . ("6d" . 307))
    '("Show @{num}." . ("6d" . 308))
    '("Show Script." . ("6d" . 311))
    '("Show Proof." . ("6d" . 312))
    '("Show Conjectures." . ("6d" . 313))
    '("Show Intro." . ("6d" . 314))
    '("Show Intros." . ("6d" . 315))
    '("Show Existentials." . ("6d" . 316))
    '("Guarded." . ("6e" . 317))
    '("Set Hyps Limit @{num}." . ("6g" . 318))
    '("Unset Hyps Limit @{num}." . ("6g" . 318))
    '("Test Hyps Limit @{num}." . ("6g" . 318))
    '("Unset Hyps Limit." . ("6h" . 319))
    '("Set Automatic Introduction." . ("6i" . 320))
    '("Test Automatic Introduction." . ("6i" . 320))
    '("Unset Automatic Introduction." . ("6i" . 321))
    '("Optimize Proof." . ("6k" . 322))
    '("Optimize Heap." . ("6l" . 323))
    '("Set Default Goal Selector \"@{selector}\"." . ("6o" . 324))
    '("Unset Default Goal Selector \"@{selector}\"." . ("6o" . 324))
    '("Test Default Goal Selector \"@{selector}\"." . ("6o" . 324))
    '("Test Default Goal Selector." . ("6p" . 325))
    '("exact @{term}" . ("6t" . 328))
    '("eexact @{term}" . ("6t" . 330))
    '("assumption" . ("6u" . 331))
    '("eassumption" . ("6u" . 333))
    '("refine @{term}" . ("6v" . 334))
    '("apply @{term}" . ("6w" . 337))
    '("apply @{term} with @{term+}" . ("6w" . 340))
    '("apply @{term} with (@{ref&} := @{term&})" . ("6w" . 342))
    '("apply @{term,+}" . ("6w" . 343))
    '("eapply @{term}" . ("6w" . 344))
    '("simple apply @{term}" . ("6w" . 345))
    '("lapply @{term}" . ("6w" . 346))
    '("apply @{term} in @{ident}" . ("6x" . 347))
    '("apply @{term,+} in @{ident}" . ("6x" . 350))
    '("apply @{term,&} with @{bindings_list,&} in @{ident}" . ("6x" . 351))
    '("eapply @{term,&} with @{bindings_list,&} in @{ident}" . ("6x" . 352))
    '("apply @{term,&} with @{bindings_list,&} in @{ident} as @{intro_pattern}" . ("6x" . 353))
    '("eapply @{term,&} with @{bindings_list,&} in @{ident} as @{intro_pattern}" . ("6x" . 354))
    '("simple apply @{term} in @{ident}" . ("6x" . 355))
    '("apply @{term,&} in @{ident}" . ("6x" . 356))
    '("apply @{term,&} in @{ident} as @{intro_pattern}" . ("6x" . 356))
    '("simple apply @{term,&} in @{ident}" . ("6x" . 356))
    '("simple apply @{term,&} in @{ident} as @{intro_pattern}" . ("6x" . 356))
    '("simple apply @{term,&} with @{bindings_list,&} in @{ident}" . ("6x" . 356))
    '("simple apply @{term,&} with @{bindings_list,&} in @{ident} as @{intro_pattern}" . ("6x" . 356))
    '("constructor @{num}" . ("6y" . 357))
    '("constructor" . ("6y" . 360))
    '("constructor @{num} with" . ("6y" . 361))
    '("split" . ("6y" . 362))
    '("exists @{bindings_list}" . ("6y" . 364))
    '("exists @{bindings_list,+}" . ("6y" . 366))
    '("left" . ("6y" . 367))
    '("right" . ("6y" . 368))
    '("left with @{bindings_list}" . ("6y" . 370))
    '("right with @{bindings_list}" . ("6y" . 371))
    '("split with @{bindings_list}" . ("6y" . 372))
    '("econstructor" . ("6y" . 373))
    '("eexists" . ("6y" . 374))
    '("esplit" . ("6y" . 375))
    '("eleft" . ("6y" . 376))
    '("eright" . ("6y" . 377))
    '("intro" . ("70" . 378))
    '("intros" . ("70" . 380))
    '("intro @{ident}" . ("70" . 381))
    '("intros @{ident+}" . ("70" . 383))
    '("intros until @{ident}" . ("70" . 384))
    '("intros until @{num}" . ("70" . 386))
    '("intro after @{ident}" . ("70" . 388))
    '("intro before @{ident}" . ("70" . 389))
    '("intro at top" . ("70" . 390))
    '("intro at bottom" . ("70" . 391))
    '("intro @{ident} after @{ident}" . ("70" . 393))
    '("intro @{ident} before @{ident}" . ("70" . 394))
    '("intro @{ident} at top" . ("70" . 395))
    '("intro @{ident} at bottom" . ("70" . 396))
    '("intros @{intro_pattern+}" . ("72" . 397))
    '("clear @{ident}" . ("73" . 398))
    '("clear @{ident+}" . ("73" . 400))
    '("clearbody @{ident}" . ("73" . 401))
    '("clear - @{ident+}" . ("73" . 402))
    '("clear" . ("73" . 403))
    '("clear dependent @{ident}" . ("73" . 404))
    '("revert @{ident+}" . ("74" . 405))
    '("revert dependent @{ident}" . ("74" . 407))
    '("move @{ident} after @{ident}" . ("75" . 408))
    '("move @{ident} before @{ident}" . ("75" . 409))
    '("move @{ident} at top" . ("75" . 410))
    '("move @{ident} at bottom" . ("75" . 411))
    '("rename @{ident} into @{ident}" . ("76" . 415))
    '("rename @{ident,&} into @{ident,&}" . ("76" . 416))
    '("set (@{ident} := @{term})" . ("77" . 418))
    '("set (@{ident} := @{term}) in @{goal_occurrences}" . ("77" . 420))
    '("set (@{ident} @{binder+} := @{term})" . ("77" . 421))
    '("set @{term}" . ("77" . 422))
    '("set (@{ident} @{binder+} := @{term}) in @{goal_occurrences}" . ("77" . 423))
    '("set @{term} in @{goal_occurrences}" . ("77" . 424))
    '("remember @{term} as @{ident}" . ("77" . 425))
    '("remember @{term} as @{ident} eqn:@{ident}" . ("77" . 426))
    '("remember @{term} as @{ident} in @{goal_occurrences}" . ("77" . 427))
    '("pose (@{ident} := @{term})" . ("77" . 428))
    '("pose (@{ident} @{binder+} := @{term})" . ("77" . 429))
    '("pose @{term}" . ("77" . 430))
    '("decompose [@{qualid+}] @{term}" . ("78" . 431))
    '("decompose sum @{term}" . ("78" . 432))
    '("decompose record @{term}" . ("78" . 433))
    '("assert (@{ident} : @{form})" . ("7a" . 434))
    '("assert @{form}" . ("7a" . 436))
    '("assert @{form} by @{tactic}" . ("7a" . 437))
    '("assert @{form} as @{intro_pattern}" . ("7a" . 439))
    '("assert @{form} as @{intro_pattern} by @{tactic}" . ("7a" . 440))
    '("assert (@{ident} := @{term})" . ("7a" . 441))
    '("pose proof @{term} as @{intro_pattern}" . ("7a" . 443))
    '("enough (@{ident} : @{form})" . ("7a" . 444))
    '("enough @{form}" . ("7a" . 445))
    '("enough @{form} as @{intro_pattern}" . ("7a" . 446))
    '("enough (@{ident} : @{form}) by @{tactic}" . ("7a" . 447))
    '("enough @{form} by @{tactic}" . ("7a" . 448))
    '("enough @{form} as @{intro_pattern} by @{tactic}" . ("7a" . 449))
    '("cut @{form}" . ("7a" . 450))
    '("specialize (@{ident} @{term+})" . ("7a" . 451))
    '("specialize @{ident} with @{bindings_list}" . ("7a" . 452))
    '("generalize @{term}" . ("7c" . 453))
    '("generalize @{term,+}" . ("7c" . 454))
    '("generalize @{term} at @{num+}" . ("7c" . 455))
    '("generalize @{term} as @{ident}" . ("7c" . 456))
    '("generalize @{term,&} at @{num+,&} as @{ident,&}" . ("7c" . 457))
    '("generalize dependent @{term}" . ("7c" . 458))
    '("evar (@{ident} : @{term})" . ("7d" . 459))
    '("instantiate (@{num} := @{term})" . ("7e" . 460))
    '("instantiate (@{num} := @{term}) in @{ident}" . ("7e" . 461))
    '("instantiate (@{num} := @{term}) in (Value of @{ident})" . ("7e" . 462))
    '("instantiate (@{num} := @{term}) in (Type of @{ident})" . ("7e" . 463))
    '("instantiate" . ("7e" . 464))
    '("absurd @{term}" . ("7f" . 465))
    '("contradiction" . ("7g" . 466))
    '("contradiction @{ident}" . ("7g" . 468))
    '("contradict @{ident}" . ("7h" . 469))
    '("exfalso" . ("7i" . 470))
    '("destruct @{term}" . ("7k" . 471))
    '("destruct @{term,+}" . ("7k" . 472))
    '("destruct @{term} as @{disj_conj_intro_pattern}" . ("7k" . 473))
    '("destruct @{term} eqn:@{naming_intro_pattern}" . ("7k" . 474))
    '("destruct @{term} with @{bindings_list}" . ("7k" . 475))
    '("edestruct @{term}" . ("7k" . 476))
    '("destruct @{term} using @{term}" . ("7k" . 477))
    '("destruct @{term} using @{term} with @{bindings_list}" . ("7k" . 478))
    '("destruct @{term} in @{goal_occurrences}" . ("7k" . 479))
    '("destruct @{term} with @{bindings_list} as @{disj_conj_intro_pattern} eqn:@{naming_intro_pattern} using @{term} with @{bindings_list} in @{goal_occurrences}" . ("7k" . 480))
    '("edestruct @{term} with @{bindings_list} as @{disj_conj_intro_pattern} eqn:@{naming_intro_pattern} using @{term} with @{bindings_list} in @{goal_occurrences}" . ("7k" . 481))
    '("destruct !@{ident}" . ("7k" . 482))
    '("case @{term}" . ("7k" . 483))
    '("case @{term} with @{bindings_list}" . ("7k" . 484))
    '("ecase @{term}" . ("7k" . 485))
    '("ecase @{term} with @{bindings_list}" . ("7k" . 486))
    '("simple destruct @{ident}" . ("7k" . 487))
    '("simple destruct @{num}" . ("7k" . 488))
    '("case_eq @{term}" . ("7k" . 489))
    '("induction @{term}" . ("7l" . 490))
    '("induction @{term} as @{disj_conj_intro_pattern}" . ("7l" . 493))
    '("induction @{term} with @{bindings_list}" . ("7l" . 494))
    '("einduction @{term}" . ("7l" . 495))
    '("induction @{term} using @{term}" . ("7l" . 496))
    '("induction @{term} using @{term} with @{bindings_list}" . ("7l" . 497))
    '("induction @{term,+} using @{qualid}" . ("7l" . 498))
    '("induction @{term} in @{goal_occurrences}" . ("7l" . 499))
    '("induction @{term} with @{bindings_list} as @{disj_conj_intro_pattern} using @{term} with @{bindings_list} in @{goal_occurrences}" . ("7l" . 500))
    '("einduction @{term} with @{bindings_list} as @{disj_conj_intro_pattern} using @{term} with @{bindings_list} in @{goal_occurrences}" . ("7l" . 501))
    '("induction !@{ident}" . ("7l" . 502))
    '("elim @{term}" . ("7l" . 503))
    '("elim @{term} with @{bindings_list}" . ("7l" . 504))
    '("eelim @{term}" . ("7l" . 505))
    '("elim @{term} using @{term}" . ("7l" . 506))
    '("elim @{term} using @{term} with @{bindings_list}" . ("7l" . 507))
    '("elim @{term} with @{bindings_list} using @{term} with @{bindings_list}" . ("7l" . 508))
    '("eelim @{term} with @{bindings_list} using @{term} with @{bindings_list}" . ("7l" . 509))
    '("elimtype @{form}" . ("7l" . 510))
    '("simple induction @{ident}" . ("7l" . 511))
    '("simple induction @{num}" . ("7l" . 512))
    '("double induction @{ident} @{ident}" . ("7m" . 513))
    '("double induction @{num} @{num}" . ("7m" . 514))
    '("dependent induction @{ident}" . ("7n" . 515))
    '("dependent induction @{ident} generalizing @{ident+}" . ("7n" . 516))
    '("dependent destruction @{ident}" . ("7n" . 517))
    '("functional induction (@{qualid} @{term+})" . ("7o" . 518))
    '("functional induction (@{qualid} @{term+}) as @{disj_conj_intro_pattern} using @{term} with @{bindings_list}" . ("7o" . 521))
    '("discriminate @{term}" . ("7p" . 522))
    '("discriminate @{num}" . ("7p" . 525))
    '("discriminate @{term} with @{bindings_list}" . ("7p" . 526))
    '("ediscriminate @{num}" . ("7p" . 527))
    '("ediscriminate @{term}" . ("7p" . 528))
    '("ediscriminate @{term} with @{bindings_list}" . ("7p" . 528))
    '("discriminate" . ("7p" . 529))
    '("injection @{term}" . ("7r" . 531))
    '("injection @{num}" . ("7r" . 535))
    '("injection @{term} with @{bindings_list}" . ("7r" . 536))
    '("einjection @{num}" . ("7r" . 537))
    '("einjection @{term}" . ("7r" . 538))
    '("einjection @{term} with @{bindings_list}" . ("7r" . 538))
    '("injection" . ("7r" . 539))
    '("injection @{term} as @{intro_pattern+}" . ("7r" . 541))
    '("injection @{term} with @{bindings_list} as @{intro_pattern+}" . ("7r" . 541))
    '("injection @{num} as @{intro_pattern+}" . ("7r" . 542))
    '("injection as @{intro_pattern+}" . ("7r" . 543))
    '("einjection @{term} as @{intro_pattern+}" . ("7r" . 544))
    '("einjection @{term} with @{bindings_list} as @{intro_pattern+}" . ("7r" . 544))
    '("einjection @{num} as @{intro_pattern+}" . ("7r" . 545))
    '("einjection as @{intro_pattern+}" . ("7r" . 546))
    '("inversion @{ident}" . ("7s" . 547))
    '("inversion @{num}" . ("7s" . 548))
    '("inversion_clear @{ident}" . ("7s" . 549))
    '("inversion @{ident} as @{intro_pattern}" . ("7s" . 550))
    '("inversion @{num} as @{intro_pattern}" . ("7s" . 551))
    '("inversion_clear @{ident} as @{intro_pattern}" . ("7s" . 552))
    '("inversion @{ident} in @{ident+}" . ("7s" . 553))
    '("inversion @{ident} as @{intro_pattern} in @{ident+}" . ("7s" . 554))
    '("inversion_clear @{ident} in @{ident+}" . ("7s" . 555))
    '("inversion_clear @{ident} as @{intro_pattern} in @{ident+}" . ("7s" . 556))
    '("dependent inversion @{ident}" . ("7s" . 557))
    '("dependent inversion @{ident} as @{intro_pattern}" . ("7s" . 558))
    '("dependent inversion_clear @{ident}" . ("7s" . 559))
    '("dependent inversion_clear @{ident} as @{intro_pattern}" . ("7s" . 560))
    '("dependent inversion @{ident} with @{term}" . ("7s" . 561))
    '("dependent inversion @{ident} as @{intro_pattern} with @{term}" . ("7s" . 562))
    '("dependent inversion_clear @{ident} with @{term}" . ("7s" . 564))
    '("dependent inversion_clear @{ident} as @{intro_pattern} with @{term}" . ("7s" . 565))
    '("simple inversion @{ident}" . ("7s" . 566))
    '("simple inversion @{ident} as @{intro_pattern}" . ("7s" . 567))
    '("inversion @{ident} using @{ident'}" . ("7s" . 568))
    '("inversion @{ident} using @{ident'} in @{ident+}" . ("7s" . 569))
    '("fix @{ident} @{num}" . ("7t" . 570))
    '("fix @{ident} @{num} with (@{ident&} @{binder+&} : @{type&})" . ("7t" . 571))
    '("fix @{ident} @{num} with (@{ident&} @{binder+&} {struct @{ident'&}} : @{type&})" . ("7t" . 571))
    '("cofix @{ident}" . ("7u" . 572))
    '("cofix @{ident} with (@{ident&} @{binder+&} : @{type&})" . ("7u" . 573))
    '("rewrite @{term}" . ("7w" . 574))
    '("rewrite -> @{term}" . ("7w" . 577))
    '("rewrite <- @{term}" . ("7w" . 578))
    '("rewrite @{term} in @{clause}" . ("7w" . 579))
    '("rewrite @{term} at @{occurrences}" . ("7w" . 580))
    '("rewrite @{term} by @{tactic}" . ("7w" . 581))
    '("rewrite @{term,+}" . ("7w" . 582))
    '("erewrite @{term}" . ("7w" . 583))
    '("replace @{term} with @{term}" . ("7x" . 584))
    '("replace @{term} with @{term} by @{tactic}" . ("7x" . 586))
    '("replace @{term}" . ("7x" . 587))
    '("replace -> @{term}" . ("7x" . 588))
    '("replace <- @{term}" . ("7x" . 589))
    '("replace @{term} with @{term} in @{clause}" . ("7x" . 590))
    '("replace @{term} with @{term} in @{clause} by @{tactic}" . ("7x" . 591))
    '("replace @{term} in @{clause}" . ("7x" . 592))
    '("replace -> @{term} in @{clause}" . ("7x" . 593))
    '("replace <- @{term} in @{clause}" . ("7x" . 594))
    '("cutrewrite <- (@{term} = @{term})" . ("7x" . 595))
    '("cutrewrite -> (@{term} = @{term})" . ("7x" . 596))
    '("subst @{ident}" . ("7y" . 597))
    '("subst @{ident+}" . ("7y" . 598))
    '("stepl @{term}" . ("7z" . 599))
    '("stepl @{term} by @{tactic}" . ("7z" . 600))
    '("stepr @{term}" . ("7z" . 601))
    '("stepr @{term} by @{tactic}" . ("7z" . 602))
    '("Declare Right Step @{term}." . ("7z" . 603))
    '("change @{term}" . ("80" . 604))
    '("change @{term} with @{term}" . ("80" . 606))
    '("change @{term} at @{num+} with @{term}" . ("80" . 607))
    '("change @{term} in @{ident}" . ("80" . 608))
    '("change @{term} with @{term} in @{ident}" . ("80" . 609))
    '("change @{term} at @{num+} with @{term} in @{ident}" . ("80" . 610))
    '("cbv @{flag+}" . ("82" . 611))
    '("lazy @{flag+}" . ("82" . 612))
    '("compute" . ("82" . 613))
    '("cbv" . ("82" . 615))
    '("lazy" . ("82" . 616))
    '("compute [@{qualid+}]" . ("82" . 617))
    '("cbv [@{qualid+}]" . ("82" . 618))
    '("compute -[@{qualid+}]" . ("82" . 619))
    '("cbv -[@{qualid+}]" . ("82" . 620))
    '("lazy [@{qualid+}]" . ("82" . 621))
    '("lazy -[@{qualid+}]" . ("82" . 622))
    '("vm_compute" . ("82" . 623))
    '("native_compute" . ("82" . 624))
    '("red" . ("83" . 625))
    '("hnf" . ("84" . 627))
    '("cbn" . ("85" . 628))
    '("simpl" . ("85" . 629))
    '("cbn [@{qualid+}]" . ("85" . 630))
    '("cbn -[@{qualid+}]" . ("85" . 631))
    '("simpl @{pattern}" . ("85" . 632))
    '("simpl @{pattern} at @{num+}" . ("85" . 633))
    '("simpl @{qualid}" . ("85" . 634))
    '("simpl @{string}" . ("85" . 635))
    '("simpl @{qualid} at @{num+}" . ("85" . 636))
    '("simpl @{string} at @{num+}" . ("85" . 637))
    '("unfold @{qualid}" . ("86" . 638))
    '("unfold @{qualid,+}" . ("86" . 640))
    '("unfold @{qualid,&} at @{num,+,&}" . ("86" . 641))
    '("unfold @{string}" . ("86" . 642))
    '("unfold @{string}%@{key}" . ("86" . 643))
    '("unfold @{qualid_or_string,&} at @{num,+,&}" . ("86" . 644))
    '("fold @{term}" . ("87" . 645))
    '("fold" . ("87" . 646))
    '("pattern @{term}" . ("88" . 647))
    '("pattern @{term} at @{num+}" . ("88" . 648))
    '("pattern @{term} at - @{num+}" . ("88" . 649))
    '("pattern @{term,+}" . ("88" . 650))
    '("pattern @{term,&} at @{num+,&}" . ("88" . 651))
    '("pattern" . ("88" . 652))
    '("auto" . ("8b" . 654))
    '("auto @{num}" . ("8b" . 655))
    '("auto with @{ident+}" . ("8b" . 656))
    '("auto with *" . ("8b" . 657))
    '("auto using @{lemma,+}" . ("8b" . 658))
    '("auto using @{lemma,+} with @{ident+}" . ("8b" . 659))
    '("trivial" . ("8b" . 660))
    '("trivial with @{ident+}" . ("8b" . 661))
    '("trivial with *" . ("8b" . 662))
    '("eauto" . ("8c" . 663))
    '("autounfold with @{ident+}" . ("8d" . 664))
    '("autounfold with @{ident+} in @{clause}" . ("8d" . 665))
    '("autounfold with *" . ("8d" . 666))
    '("autorewrite with @{ident+}" . ("8e" . 667))
    '("autorewrite with @{ident+} using @{tactic}" . ("8e" . 668))
    '("autorewrite with @{ident+} in @{qualid}" . ("8e" . 669))
    '("autorewrite with @{ident+} in @{qualid} using @{tactic}" . ("8e" . 670))
    '("autorewrite with @{ident+} in @{clause}" . ("8e" . 671))
    '("Create HintDb @{ident}." . ("8h" . 672))
    '("Create HintDb @{ident} discriminated." . ("8h" . 672))
    '("Hint @{hint_definition} : @{ident+}." . ("8h" . 673))
    '("Hint @{hint_definition}." . ("8h" . 674))
    '("Local Hint @{hint_definition} : @{ident+}." . ("8h" . 675))
    '("Local Hint @{hint_definition}." . ("8h" . 676))
    '("Resolve @{term}." . ("8h" . 677))
    '("Resolve @{term+}." . ("8h" . 680))
    '("Immediate @{term+}." . ("8h" . 683))
    '("Constructors @{ident+}." . ("8h" . 686))
    '("Unfold @{ident+}." . ("8h" . 687))
    '("Hint Local @{hint_definition} : @{ident+}." . ("8h" . 689))
    '("Hint Local @{hint_definition}." . ("8h" . 690))
    '("Remove Hints @{term+} : @{ident+}." . ("8j" . 691))
    '("Print Hint." . ("8k" . 692))
    '("Print Hint @{ident}." . ("8k" . 693))
    '("Print Hint *." . ("8k" . 694))
    '("Print HintDb @{ident}." . ("8k" . 695))
    '("Hint Rewrite @{term+} : @{ident+}." . ("8l" . 696))
    '("Hint Rewrite -> @{term+} : @{ident+}." . ("8l" . 697))
    '("Hint Rewrite <- @{term+} : @{ident+}." . ("8l" . 698))
    '("Hint Rewrite @{term+} using @{tactic} : @{ident+}." . ("8l" . 699))
    '("Print Rewrite HintDb @{ident}." . ("8l" . 700))
    '("Proof with @{tactic}." . ("8n" . 703))
    '("Proof with @{tactic} using @{ident+}." . ("8n" . 704))
    '("Declare Implicit Tactic @{tactic}." . ("8n" . 706))
    '("tauto" . ("8p" . 705))
    '("intuition @{tactic}" . ("8q" . 706))
    '("intuition" . ("8q" . 707))
    '("rtauto" . ("8r" . 708))
    '("firstorder" . ("8s" . 709))
    '("firstorder @{tactic}" . ("8s" . 710))
    '("firstorder with @{ident+}" . ("8s" . 711))
    '("firstorder using @{qualid,+}" . ("8s" . 712))
    '("firstorder using @{qualid,+} with @{ident+}" . ("8s" . 713))
    '("congruence" . ("8t" . 714))
    '("congruence @{n}" . ("8t" . 715))
    '("congruence with @{term+}" . ("8t" . 716))
    '("constr_eq @{term} @{term}" . ("8v" . 719))
    '("unify @{term} @{term}" . ("8w" . 721))
    '("unify @{term} @{term} with @{ident}" . ("8w" . 723))
    '("is_evar @{term}" . ("8x" . 724))
    '("has_evar @{term}" . ("8y" . 726))
    '("is_var @{term}" . ("8z" . 728))
    '("f_equal" . ("91" . 730))
    '("reflexivity" . ("92" . 731))
    '("symmetry" . ("93" . 734))
    '("symmetry in @{ident}" . ("93" . 735))
    '("transitivity @{term}" . ("94" . 736))
    '("decide equality" . ("96" . 737))
    '("compare @{term} @{term}" . ("97" . 738))
    '("simplify_eq @{term}" . ("98" . 739))
    '("simplify_eq @{num}" . ("98" . 740))
    '("simplify_eq" . ("98" . 741))
    '("esimplify_eq @{num}" . ("98" . 742))
    '("esimplify_eq @{term}" . ("98" . 743))
    '("esimplify_eq @{term} with @{bindings_list}" . ("98" . 743))
    '("dependent rewrite -> @{ident}" . ("99" . 745))
    '("dependent rewrite <- @{ident}" . ("99" . 746))
    '("functional inversion @{ident}" . ("9b" . 747))
    '("functional inversion @{num}" . ("9b" . 750))
    '("functional inversion @{ident} @{qualid}" . ("9b" . 751))
    '("quote @{ident}" . ("9c" . 752))
    '("quote @{ident} [@{ident+}]" . ("9c" . 754))
    '("classical_left" . ("9e" . 755))
    '("classical_right" . ("9e" . 756))
    '("btauto" . ("9g" . 757))
    '("omega" . ("9h" . 758))
    '("ring" . ("9i" . 759))
    '("ring_simplify @{term+}" . ("9i" . 760))
    '("field" . ("9j" . 761))
    '("field_simplify @{term+}" . ("9j" . 762))
    '("field_simplify_eq" . ("9j" . 763))
    '("fourier" . ("9k" . 764))
    '("cycle @{num}" . ("9m" . 765))
    '("swap @{num} @{num}" . ("9n" . 766))
    '("revgoals" . ("9o" . 767))
    '("shelve" . ("9p" . 768))
    '("shelve_unifiable" . ("9p" . 769))
    '("Unshelve." . ("9q" . 770))
    '("give_up" . ("9r" . 771))
    '("do @{num} @{expr}" . ("9w" . 772))
    '("repeat @{expr}" . ("9w" . 773))
    '("try @{expr}" . ("9w" . 774))
    '("progress @{expr}" . ("9w" . 775))
    '("tryif @{expr} then @{expr} else @{expr}" . ("9w" . 778))
    '("once @{expr}" . ("9w" . 779))
    '("exactly_once @{expr}" . ("9w" . 780))
    '("solve [@{expr|+}]" . ("9w" . 782))
    '("idtac" . ("9w" . 784))
    '("idtac @{message_token+}" . ("9w" . 785))
    '("fail" . ("9w" . 786))
    '("fail @{n}" . ("9w" . 787))
    '("fail @{message_token+}" . ("9w" . 788))
    '("fail @{n} @{message_token+}" . ("9w" . 789))
    '("gfail" . ("9w" . 790))
    '("gfail @{message_token+}" . ("9w" . 791))
    '("gfail @{n} @{message_token+}" . ("9w" . 792))
    '("timeout @{num} @{expr}" . ("9w" . 794))
    '("time @{string} @{expr}" . ("9w" . 795))
    '("@{qualid} @{tacarg+}" . ("9w" . 796))
    '("fun @{ident+} => @{expr}" . ("9w" . 797))
    '("context @{ident} [@{cpattern}]" . ("9w" . 800))
    '("appcontext @{ident} [@{cpattern}]" . ("9w" . 801))
    '("context @{ident} [@{expr}]" . ("9w" . 803))
    '("fresh @{component+}" . ("9w" . 805))
    '("eval @{redexpr} in @{term}" . ("9w" . 806))
    '("type of @{term}" . ("9w" . 807))
    '("uconstr : @{term}" . ("9w" . 808))
    '("type_term @{term}" . ("9w" . 809))
    '("guard @{test}" . ("9w" . 810))
    '("abstract @{expr}" . ("9w" . 812))
    '("Qed exporting." . ("9w" . 813))
    '("Qed exporting @{ident,+}." . ("9w" . 814))
    '("abstract @{expr} using @{ident}" . ("9w" . 815))
    '("Print Ltac @{qualid}." . ("9z" . 817))
    '("Info @{num} @{expr}." . ("a1" . 818))
    '("Set Info Level @{num}." . ("a1" . 819))
    '("Test Info Level @{num}." . ("a1" . 819))
    '("Unset Info Level @{num}." . ("a1" . 820))
    '("Set Ltac Debug." . ("a2" . 821))
    '("Test Ltac Debug." . ("a2" . 821))
    '("Unset Ltac Debug." . ("a2" . 822))
    '("specialize_eqs" . ("a5" . 823))
    '("Print Grammar pattern." . ("ba" . 825))
    '("Open Scope @{scope}." . ("bm" . 826))
    '("Close Scope @{scope}." . ("bm" . 827))
    '("Local Open Scope @{scope}." . ("bm" . 828))
    '("Local Close Scope @{scope}." . ("bm" . 829))
    '("Global Open Scope @{scope}." . ("bm" . 830))
    '("Global Close Scope @{scope}." . ("bm" . 831))
    '("Arguments @{qualid} @{name&} %@{scope&}." . ("bn" . 832))
    '("Arguments @{qualid} : clear scopes." . ("bn" . 833))
    '("Global Arguments @{qualid} @{name&} %@{scope&}." . ("bn" . 834))
    '("Local Arguments @{qualid} @{name&} %@{scope&}." . ("bn" . 835))
    '("Bind Scope @{scope} with @{qualid}." . ("bn" . 836))
    '("Print Scopes." . ("bp" . 850))
    '("Print Scope @{scope}." . ("bp" . 851))
    '("type_scope" . ("bp" . 852))
    '("nat_scope" . ("bp" . 853))
    '("N_scope" . ("bp" . 854))
    '("Z_scope" . ("bp" . 855))
    '("positive_scope" . ("bp" . 856))
    '("Q_scope" . ("bp" . 857))
    '("Qc_scope" . ("bp" . 858))
    '("real_scope" . ("bp" . 859))
    '("bool_scope" . ("bp" . 860))
    '("list_scope" . ("bp" . 861))
    '("core_scope" . ("bp" . 862))
    '("string_scope" . ("bp" . 863))
    '("char_scope" . ("bp" . 864))
    '("Print Visibility." . ("bq" . 855))
    '("Print Visibility @{scope}." . ("bq" . 856))
    '("Notation @{ident} := @{term}." . ("br" . 856))
    '("Notation @{ident} := @{term} (only parsing)." . ("br" . 856))
    '("Notation @{ident} @{ident&} @{ident&} := @{term}." . ("br" . 856))
    '("Notation @{ident} @{ident&} @{ident&} := @{term} (only parsing)." . ("br" . 856))
    '("Local Notation @{ident} := @{term}." . ("br" . 856))
    '("Local Notation @{ident} := @{term} (only parsing)." . ("br" . 856))
    '("Local Notation @{ident} @{ident&} @{ident&} := @{term}." . ("br" . 856))
    '("Local Notation @{ident} @{ident&} @{ident&} := @{term} (only parsing)." . ("br" . 856))
    '("Tactic Notation @{tactic_level} := @{tactic}." . ("bs" . 857))
    '("Tactic Notation @{tactic_level} @{prod_item+} := @{tactic}." . ("bs" . 857))
    '("Print Grammar tactic." . ("bs" . 858))
    '("Context @{binder+}." . ("eh" . 870))
    '("Typeclasses Transparent @{ident+}." . ("ei" . 871))
    '("Typeclasses Opaque @{ident+}." . ("ei" . 872))
    '("Typeclasses eauto :=." . ("ej" . 873))
    '("Typeclasses eauto := @{dfs|bfs} @{depth}." . ("ej" . 873))
    '("Typeclasses eauto := debug." . ("ej" . 873))
    '("Typeclasses eauto := debug @{dfs|bfs} @{depth}." . ("ej" . 873))
    '("Set Refine Instance Mode." . ("ek" . 874))
    '("Unset Refine Instance Mode." . ("ek" . 874))
    '("Test Refine Instance Mode." . ("ek" . 874))
    '("psatz" . ("ey" . 883))
    '("lra" . ("f1" . 884))
    '("lia" . ("f5" . 885))
    '("nia" . ("f8" . 886))
    '("Extraction @{qualid}." . ("fa" . 887))
    '("Extraction \"@{file}\" @{qualid+}." . ("fa" . 889))
    '("Extraction Library @{ident}." . ("fa" . 890))
    '("Recursive Extraction Library @{ident}." . ("fa" . 891))
    '("Separate Extraction @{qualid+}." . ("fa" . 892))
    '("Extraction Language Ocaml." . ("fc" . 893))
    '("Extraction Language Haskell." . ("fc" . 894))
    '("Extraction Language Scheme." . ("fc" . 895))
    '("Set Extraction Optimize." . ("fd" . 896))
    '("Test Extraction Optimize." . ("fd" . 896))
    '("Unset Extraction Optimize." . ("fd" . 897))
    '("Set Extraction Conservative Types." . ("fd" . 898))
    '("Test Extraction Conservative Types." . ("fd" . 898))
    '("Unset Extraction Conservative Types." . ("fd" . 899))
    '("Set Extraction KeepSingleton." . ("fd" . 900))
    '("Test Extraction KeepSingleton." . ("fd" . 900))
    '("Unset Extraction KeepSingleton." . ("fd" . 901))
    '("Set Extraction AutoInline." . ("fd" . 902))
    '("Test Extraction AutoInline." . ("fd" . 902))
    '("Unset Extraction AutoInline." . ("fd" . 903))
    '("Extraction Inline @{qualid+}." . ("fd" . 904))
    '("Extraction NoInline @{qualid+}." . ("fd" . 905))
    '("Print Extraction Inline." . ("fd" . 906))
    '("Reset Extraction Inline." . ("fd" . 907))
    '("Extraction Implicit @{qualid} [@{ident+}]." . ("fe" . 908))
    '("Extract Constant @{qualid} => \"@{string}\"." . ("ff" . 909))
    '("Extract Inlined Constant @{qualid} => \"@{string}\"." . ("ff" . 910))
    '("Extract Constant @{qualid} \"@{string+}\" => \"@{string}\"." . ("ff" . 911))
    '("Extract Inductive @{qualid} => \"@{string}\" [\"@{string+}\"] @{optstring}." . ("ff" . 912))
    '("Extraction Blacklist @{ident+}." . ("fg" . 913))
    '("Print Extraction Blacklist." . ("fg" . 914))
    '("Reset Extraction Blacklist." . ("fg" . 915))
    '("ring_simplify" . ("g0" . 919))
    '("ring [@{term+}]" . ("g0" . 920))
    '("ring_simplify [@{term+}] @{t+} in @{ident}" . ("g0" . 921))
    '("Add Ring @{name} : @{ring} (@{mod,+})." . ("g1" . 926))
    '("field [@{term+}]" . ("g3" . 931))
    '("field_simplify" . ("g3" . 932))
    '("field_simplify [@{term+}]" . ("g3" . 933))
    '("field_simplify [@{term+}] @{term+}" . ("g3" . 934))
    '("field_simplify in @{hyp}" . ("g3" . 935))
    '("field_simplify [@{term+}] in @{hyp}" . ("g3" . 936))
    '("field_simplify [@{term+}] @{term+} in @{hyp}" . ("g3" . 937))
    '("field_simplify_eq [@{term+}]" . ("g3" . 939))
    '("field_simplify_eq in @{hyp}" . ("g3" . 940))
    '("field_simplify_eq [@{term+}] in @{hyp}" . ("g3" . 941))
    '("Add Field @{name} : @{field} (@{mod,+})." . ("g4" . 942))
    '("nsatz" . ("g9" . 943))
    '("nsatz with radicalmax:=@{num}%N strategy:=@{num}%Z parameters:=@{list of vars} variables:=@{list of vars}" . ("g9" . 944))
    '("setoid_reflexivity" . ("gl" . 945))
    '("setoid_symmetry" . ("gl" . 946))
    '("setoid_symmetry in @{ident}" . ("gl" . 946))
    '("setoid_transitivity" . ("gl" . 947))
    '("setoid_rewrite @{term}" . ("gl" . 948))
    '("setoid_rewrite @{term} in @{ident}" . ("gl" . 948))
    '("setoid_rewrite <- @{term}" . ("gl" . 949))
    '("setoid_rewrite <- @{term} in @{ident}" . ("gl" . 949))
    '("setoid_rewrite <- @{term} at @{occs}" . ("gl" . 950))
    '("setoid_rewrite <- @{term} at @{occs} in @{ident}" . ("gl" . 950))
    '("setoid_rewrite @{term} at @{occs}" . ("gl" . 951))
    '("setoid_rewrite @{term} at @{occs} in @{ident}" . ("gl" . 951))
    '("setoid_rewrite @{orientation} @{term}" . ("gl" . 951))
    '("setoid_rewrite @{orientation} @{term} in @{ident}" . ("gl" . 951))
    '("setoid_rewrite @{orientation} @{term} at @{occs}" . ("gl" . 951))
    '("setoid_rewrite @{orientation} @{term} at @{occs} in @{ident}" . ("gl" . 951))
    '("setoid_replace @{term} with @{term}" . ("gl" . 952))
    '("setoid_replace @{term} with @{term} by @{tactic}" . ("gl" . 953))
    '("setoid_replace @{term} with @{term} using relation @{term}" . ("gl" . 953))
    '("setoid_replace @{term} with @{term} using relation @{term} by @{tactic}" . ("gl" . 953))
    '("setoid_replace @{term} with @{term} in @{ident}" . ("gl" . 953))
    '("setoid_replace @{term} with @{term} in @{ident} by @{tactic}" . ("gl" . 953))
    '("setoid_replace @{term} with @{term} in @{ident} using relation @{term}" . ("gl" . 953))
    '("setoid_replace @{term} with @{term} in @{ident} using relation @{term} by @{tactic}" . ("gl" . 953))
    '("Print Instances @{Reflexive|Symmetric|Transitive|Equivalence|PreOrder|PER|Proper}." . ("gm" . 954))
    '("rewrite_strat @{s}" . ("gu" . 955))
    '("rewrite_strat @{s} in @{ident}" . ("gu" . 955))))

(defconst company-coq-errors
  (list
    '("@{ident} already exists" . ("10" . 0))
    '("The term @{term} has type @{type} while it is expected to have type @{type}" . ("11" . 3))
    '("Non strictly positive occurrence of @{ident} in @{type}" . ("12" . 5))
    '("The conclusion of @{type} is not valid; it must be built from @{ident}" . ("12" . 6))
    '("The @{num}th argument of @{ident} must be @{ident}’ in @{type}" . ("12" . 7))
    '("The term @{form} has type @{hole} which should be Set, Prop or Type" . ("14" . 10))
    '("Records declared with the keyword Record or Structure cannot be recursive." . ("16" . 18))
    '("Cannot handle mutually (co)inductive records." . ("16" . 19))
    '("The recursive argument must be specified" . ("1d" . 41))
    '("No argument name @{ident}" . ("1d" . 42))
    '("Cannot use mutual definition with well-founded recursion or measure" . ("1d" . 43))
    '("Cannot define graph for @{ident}@{hole}" . ("1d" . 44))
    '("Cannot define principle(s) for @{ident}@{hole}" . ("1d" . 45))
    '("Cannot build functional inversion principle" . ("1d" . 46))
    '("This is not the last opened section" . ("1g" . 47))
    '("Cannot infer a term for this placeholder" . ("1o" . 48))
    '("No such label @{ident}" . ("2c" . 106))
    '("Signature components for label @{ident} do not match" . ("2c" . 107))
    '("This is not the last opened module" . ("2c" . 108))
    '("This is not the last opened module type" . ("2c" . 120))
    '("Universe inconsistency" . ("35" . 123))
    '("not a defined object" . ("3t" . 125))
    '("The reference @{qualid} was not found in the current environment" . ("4a" . 158))
    '("Module/section @{module} not found" . ("4b" . 170))
    '("Can’t find file @{ident} on loadpath" . ("4g" . 190))
    '("Cannot load @{qualid}: no physical path bound to @{dirpath}" . ("4i" . 196))
    '("Cannot find library foo in loadpath" . ("4i" . 197))
    '("Compiled library @{ident}.vo makes inconsistent assumptions over library @{qualid}" . ("4i" . 198))
    '("Bad magic number" . ("4i" . 199))
    '("The file @{ident}.vo contains library @{dirpath} and not library @{dirpath}’" . ("4i" . 200))
    '("Require is not allowed inside a module or a module type" . ("4i" . 201))
    '("File not found on loadpath : \"@{string}\"" . ("4k" . 205))
    '("Loading of ML object file forbidden in a native Coq" . ("4k" . 206))
    '("no such entry" . ("4z" . 224))
    '("Invalid backtrack" . ("50" . 227))
    '("No focused proof" . ("5u" . 260))
    '("Attempt to save an incomplete proof" . ("5x" . 263))
    '("No focused proof (No proof-editing in progress)" . ("61" . 289))
    '("No focused proof to restart" . ("66" . 297))
    '("This proof is focused, but cannot be unfocused this way" . ("6a" . 302))
    '("Wrong bullet @{bullet}1 : Current bullet @{bullet}2 is not finished." . ("6b" . 303))
    '("Wrong bullet @{bullet}1 : Bullet @{bullet}2 is mandatory here." . ("6b" . 304))
    '("No such goal. Focus next goal with bullet @{bullet}." . ("6b" . 305))
    '("No such goal. Try unfocusing with \"}\"." . ("6b" . 306))
    '("No such goal" . ("6d" . 309))
    '("No such binder" . ("6q" . 326))
    '("Not the right number of missing arguments" . ("6q" . 327))
    '("Not an exact proof" . ("6t" . 329))
    '("No such assumption" . ("6u" . 332))
    '("invalid argument" . ("6v" . 335))
    '("Impossible to unify @{hole} with @{hole}" . ("6w" . 338))
    '("Unable to find an instance for the variables @{ident+}" . ("6w" . 339))
    '("Statement without assumptions" . ("6x" . 348))
    '("Unable to apply" . ("6x" . 349))
    '("Not an inductive product" . ("6y" . 358))
    '("Not enough constructors" . ("6y" . 359))
    '("Not an inductive goal with 1 constructor" . ("6y" . 363))
    '("Not an inductive goal with 2 constructors" . ("6y" . 369))
    '("No product even after head-reduction" . ("70" . 379))
    '("name @{ident} is already used" . ("70" . 382))
    '("No such hypothesis in current goal" . ("70" . 385))
    '("No such hypothesis" . ("70" . 392))
    '("Cannot move @{ident} after @{ident}: it occurs in @{ident}" . ("75" . 413))
    '("Cannot move @{ident} after @{ident}: it depends on @{ident}" . ("75" . 414))
    '("The variable @{ident} is already defined" . ("77" . 419))
    '("Not a proposition or a type" . ("7a" . 435))
    '("Proof is not complete" . ("7a" . 438))
    '("Variable @{ident} is already declared" . ("7a" . 442))
    '("Cannot find induction information on @{qualid}" . ("7o" . 519))
    '("Not the right number of induction arguments" . ("7o" . 520))
    '("No primitive equality found" . ("7p" . 523))
    '("Not a discriminable equality" . ("7p" . 524))
    '("No discriminable equalities" . ("7p" . 530))
    '("Not a projectable equality but a discriminable one" . ("7r" . 532))
    '("Nothing to do, it is an equality between convertible terms" . ("7r" . 533))
    '("Not a primitive equality" . ("7r" . 534))
    '("goal does not satisfy the expected preconditions" . ("7r" . 540))
    '("The term provided does not end with an equation" . ("7w" . 575))
    '("Tactic generated a subgoal identical to the original goal" . ("7w" . 576))
    '("terms do not have convertible types" . ("7x" . 585))
    '("Not convertible" . ("80" . 605))
    '("Not reducible" . ("83" . 626))
    '("does not denote an evaluable constant" . ("86" . 639))
    '("Bound head variable" . ("8h" . 678))
    '("cannot be used as a hint" . ("8h" . 679))
    '("is not an inductive type" . ("8h" . 684))
    '("not declared" . ("8h" . 685))
    '("I don’t know how to handle dependent equality" . ("8t" . 717))
    '("Goal is solvable by congruence but some arguments are missing. Try \"congruence with @{hole}\", replacing metavariables by arbitrary terms." . ("8t" . 718))
    '("Not equal" . ("8v" . 720))
    '("Not unifiable" . ("8w" . 722))
    '("Not an evar" . ("8x" . 725))
    '("No evars" . ("8y" . 727))
    '("Not a variable or hypothesis" . ("8z" . 729))
    '("The conclusion is not a substitutive equation" . ("92" . 732))
    '("Hypothesis @{ident} must contain at least one Function" . ("9b" . 748))
    '("Cannot find inversion information for hypothesis @{ident}" . ("9b" . 749))
    '("quote: not a simple fixpoint" . ("9c" . 753))
    '("Failed to progress" . ("9w" . 776))
    '("No applicable tactic" . ("9w" . 777))
    '("This tactic has more than one success" . ("9w" . 781))
    '("Cannot solve the goal" . ("9w" . 783))
    '("Tactic Failure @{message} (level @{n})" . ("9w" . 793))
    '("No matching clauses for match" . ("9w" . 798))
    '("Argument of match does not evaluate to a term" . ("9w" . 799))
    '("No matching clauses for match goal" . ("9w" . 802))
    '("not a context variable" . ("9w" . 804))
    '("Condition not satisfied" . ("9w" . 811))
    '("Non exhaustive pattern-matching" . ("de" . 859))
    '("is already a coercion" . ("dm" . 861))
    '("Funclass cannot be a source class" . ("dm" . 862))
    '("Sortclass cannot be a source class" . ("dm" . 863))
    '("is not a function" . ("dm" . 864))
    '("Cannot find the source class of @{qualid}" . ("dm" . 865))
    '("Cannot recognize @{class} as a source class of @{qualid}" . ("dm" . 866))
    '("does not respect the uniform inheritance condition" . ("dm" . 867))
    '("Found target class @{class} instead of @{class}" . ("dm" . 868))
    '("must be a transparent constant" . ("dn" . 869))
    '("omega can’t solve this system" . ("eo" . 875))
    '("omega: Not a quantifier-free goal" . ("eo" . 876))
    '("omega: Unrecognized predicate or connective: @{ident}" . ("eo" . 877))
    '("omega: Unrecognized atomic proposition: @{prop}" . ("eo" . 878))
    '("omega: Can’t solve a goal with proposition variables" . ("eo" . 879))
    '("omega: Unrecognized proposition" . ("eo" . 880))
    '("omega: Can’t solve a goal with non-linear products" . ("eo" . 881))
    '("omega: Can’t solve a goal with equality on @{type}" . ("eo" . 882))
    '("In environment @{hole} the term: @{term} does not have type @{term}" . ("fp" . 917))
    '("not a valid ring equation" . ("g0" . 922))
    '("arguments of ring_simplify do not have all the same type" . ("g0" . 923))
    '("cannot find a declared ring structure over term" . ("g0" . 924))
    '("cannot find a declared ring structure for equality term" . ("g0" . 925))
    '("bad ring structure" . ("g1" . 927))
    '("bad lemma for decidability of equality" . ("g1" . 928))
    '("ring @{operation} should be declared as a morphism" . ("g1" . 929))
    '("Nothing to rewrite" . ("gu" . 956))
    '("No progress made" . ("gu" . 957))
    '("Unable to satisfy the rewriting constraints" . ("gu" . 958))
    '("Undeclared universe @{ident}" . ("h4" . 960))))

(provide 'company-coq-abbrev)
;;; company-coq-abbrev.el ends here
