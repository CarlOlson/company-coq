;;; company-coq-abbrev.el --- Auto-generated from RefMan

;;; Commentary:

;;; Code:

(defconst company-coq-abbrevs-RefMan-int
  (list 
    ))

(defconst company-coq-abbrevs-RefMan-pre
  (list 
    ))

(defconst company-coq-abbrevs-RefMan-gal
  (list 
    '("Theorem @{ident} : @{type}." . ("14" . 0))
    '("Theorem @{ident} @{binders} : @{type}." . ("14" . 0))
    '("Lemma @{ident} : @{type}." . ("14" . 1))
    '("Lemma @{ident} @{binders} : @{type}." . ("14" . 1))
    '("Remark @{ident} : @{type}." . ("14" . 2))
    '("Remark @{ident} @{binders} : @{type}." . ("14" . 2))
    '("Fact @{ident} : @{type}." . ("14" . 3))
    '("Fact @{ident} @{binders} : @{type}." . ("14" . 3))
    '("Corollary @{ident} : @{type}." . ("14" . 4))
    '("Corollary @{ident} @{binders} : @{type}." . ("14" . 4))
    '("Proposition @{ident} : @{type}." . ("14" . 5))
    '("Proposition @{ident} @{binders} : @{type}." . ("14" . 5))
    '("Definition @{ident} : @{type}." . ("14" . 6))
    '("Definition @{ident} @{binders} : @{type}." . ("14" . 6))
    '("Let @{ident} : @{type}." . ("14" . 7))
    '("Let @{ident} @{binders} : @{type}." . ("14" . 7))))

(defconst company-coq-abbrevs-RefMan-ext
  (list 
    '("Unset Printing Records." . ("16" . 8))
    '("Add Printing Record @{ident}." . ("16" . 9))
    '("Add Printing Constructor @{ident}." . ("16" . 10))
    '("Set Printing Projections." . ("16" . 11))
    '("Test Printing Projections." . ("16" . 11))
    '("Unset Printing Projections." . ("16" . 11))
    '("Set Printing Matching." . ("1c" . 12))
    '("Test Printing Matching." . ("1c" . 12))
    '("Unset Printing Matching." . ("1c" . 12))
    '("Set Printing Wildcard." . ("1c" . 15))
    '("Test Printing Wildcard." . ("1c" . 15))
    '("Unset Printing Wildcard." . ("1c" . 15))
    '("Set Printing Synth." . ("1c" . 18))
    '("Test Printing Synth." . ("1c" . 18))
    '("Unset Printing Synth." . ("1c" . 18))
    '("Add Printing Let @{ident}." . ("1c" . 21))
    '("Remove Printing Let @{ident}." . ("1c" . 22))
    '("Test Printing Let for @{ident}." . ("1c" . 23))
    '("Print Table Printing Let." . ("1c" . 24))
    '("Add Printing If @{ident}." . ("1c" . 25))
    '("Remove Printing If @{ident}." . ("1c" . 26))
    '("Test Printing If for @{ident}." . ("1c" . 27))
    '("Print Table Printing If." . ("1c" . 28))
    '("Arguments @{qualid} @{possiblybracketedident+}." . ("1p" . 29))
    '("Arguments @{qualid} : clear implicits." . ("1p" . 30))
    '("Arguments @{qualid} : default implicits." . ("1q" . 31))
    '("Set Implicit Arguments." . ("1r" . 32))
    '("Test Implicit Arguments." . ("1r" . 32))
    '("Unset Implicit Arguments." . ("1r" . 32))
    '("Unset Strict Implicit." . ("1s" . 33))
    '("Set Strongly Strict Implicit." . ("1s" . 34))
    '("Test Strongly Strict Implicit." . ("1s" . 34))
    '("Unset Strongly Strict Implicit." . ("1s" . 34))
    '("Set Contextual Implicit." . ("1t" . 35))
    '("Test Contextual Implicit." . ("1t" . 35))
    '("Unset Contextual Implicit." . ("1t" . 35))
    '("Set Reversible Pattern Implicit." . ("1u" . 36))
    '("Test Reversible Pattern Implicit." . ("1u" . 36))
    '("Unset Reversible Pattern Implicit." . ("1u" . 36))
    '("Set Maximal Implicit Insertion." . ("1v" . 37))
    '("Test Maximal Implicit Insertion." . ("1v" . 37))
    '("Unset Maximal Implicit Insertion." . ("1v" . 37))
    '("Arguments @{qualid} @{name+} : rename." . ("1x" . 38))
    '("Print Implicit @{qualid}." . ("1y" . 39))
    '("Set Printing Implicit." . ("1z" . 40))
    '("Test Printing Implicit." . ("1z" . 40))
    '("Unset Printing Implicit." . ("1z" . 40))
    '("Unset Printing Implicit Defensive." . ("1z" . 42))
    '("Set Printing Implicit Defensive." . ("1z" . 43))
    '("Test Printing Implicit Defensive." . ("1z" . 43))
    '("Set Parsing Explicit." . ("21" . 44))
    '("Test Parsing Explicit." . ("21" . 44))
    '("Unset Parsing Explicit." . ("21" . 44))
    '("Canonical Structure @{qualid}." . ("22" . 46))
    '("Implicit Types @{ident+} : @{type}." . ("23" . 47))
    '("Generalizable All Variables." . ("24" . 48))
    '("Generalizable No Variables." . ("24" . 49))
    '("Generalizable Variable @{ident}." . ("24" . 50))
    '("Generalizable Variables @{ident}." . ("24" . 51))
    '("Global Generalizable All Variables." . ("24" . 52))
    '("Coercion @{qualid} : @{class} >-> @{class}." . ("25" . 53))
    '("Set Printing All." . ("26" . 54))
    '("Test Printing All." . ("26" . 54))
    '("Unset Printing All." . ("26" . 54))
    '("Set Printing Universes." . ("27" . 56))
    '("Test Printing Universes." . ("27" . 56))
    '("Unset Printing Universes." . ("27" . 56))
    '("Print Universes." . ("27" . 58))
    '("Print Sorted Universes." . ("27" . 58))
    '("Print Universes \"@{str}\"." . ("27" . 59))
    '("Print Sorted Universes \"@{str}\"." . ("27" . 59))
    '("Set Printing Existential Instances." . ("29" . 60))
    '("Test Printing Existential Instances." . ("29" . 60))
    '("Unset Printing Existential Instances." . ("29" . 60))))

(defconst company-coq-abbrevs-RefMan-mod
  (list 
    '("Module @{ident}." . ("2c" . 62))
    '("Module @{ident} @{modbindings}." . ("2c" . 63))
    '("Module @{ident} : @{modtype}." . ("2c" . 64))
    '("Module @{ident} @{modbindings} : @{modtype}." . ("2c" . 65))
    '("Module @{ident} <: @{modtype<:+}." . ("2c" . 66))
    '("Module @{ident} @{modbindings} <: @{modtype<:+}." . ("2c" . 67))
    '("Include @{module}." . ("2c" . 68))
    '("Include @{module<++}." . ("2c" . 69))
    '("End @{ident}." . ("2c" . 72))
    '("Module @{ident} := @{modexpr}." . ("2c" . 73))
    '("Module @{ident} @{modbindings} := @{modexpr}." . ("2c" . 74))
    '("Module @{ident} @{modbindings} : @{modtype} := @{modexpr}." . ("2c" . 75))
    '("Module @{ident} @{modbindings} <: @{modtype<:+} := @{modexpr}." . ("2c" . 76))
    '("Module @{ident} @{modbindings} := @{modexpr<++}." . ("2c" . 77))
    '("Module Type @{ident}." . ("2c" . 78))
    '("Module Type @{ident} @{modbindings}." . ("2c" . 79))
    '("@{assumptionkeyword} Inline @{assums}" . ("2c" . 82))
    '("Module Type @{ident} := @{modtype}." . ("2c" . 84))
    '("Module Type @{ident} @{modbindings} := @{modtype}." . ("2c" . 85))
    '("Module Type @{ident} @{modbindings} := @{modtype<++}." . ("2c" . 86))
    '("Declare Module @{ident} : @{modtype}." . ("2c" . 87))
    '("Declare Module @{ident} @{modbindings} : @{modtype}." . ("2c" . 88))
    '("Import @{qualid}." . ("2c" . 89))
    '("Export @{qualid}." . ("2c" . 90))
    '("Print Module @{ident}." . ("2c" . 91))
    '("Print Module Type @{ident}." . ("2c" . 92))
    '("Locate Module @{qualid}." . ("2c" . 93))))

(defconst company-coq-abbrevs-RefMan-lib
  (list 
    '("discrR" . ("30" . 94))
    '("split_Rabs" . ("30" . 95))
    '("split_Rmult" . ("30" . 96))))

(defconst company-coq-abbrevs-RefMan-cic
  (list 
    ))

(defconst company-coq-abbrevs-RefMan-modr
  (list 
    ))

(defconst company-coq-abbrevs-RefMan-oth
  (list 
    '("Print @{qualid}." . ("3t" . 97))
    '("Print Term @{qualid}." . ("3t" . 98))
    '("About @{qualid}." . ("3t" . 99))
    '("Print All." . ("3u" . 100))
    '("Inspect @{num}." . ("3u" . 101))
    '("Print Section @{ident}." . ("3u" . 102))
    '("Set @{flag}." . ("3w" . 103))
    '("Local Set @{flag}." . ("3w" . 104))
    '("Global Set @{flag}." . ("3w" . 105))
    '("Unset @{flag}." . ("3x" . 106))
    '("Local Unset @{flag}." . ("3x" . 107))
    '("Global Unset @{flag}." . ("3x" . 108))
    '("Test @{flag}." . ("3y" . 109))
    '("Set @{option} @{value}." . ("3z" . 110))
    '("Local Set @{option} @{value}." . ("3z" . 111))
    '("Global Set @{option} @{value}." . ("3z" . 112))
    '("Unset @{option}." . ("40" . 113))
    '("Local Unset @{option}." . ("40" . 114))
    '("Global Unset @{option}." . ("40" . 115))
    '("Test @{option}." . ("41" . 116))
    '("Print Options." . ("43" . 117))
    '("Print Tables." . ("43" . 118))
    '("Check @{term}." . ("45" . 119))
    '("Eval @{convtactic} in @{term}." . ("46" . 121))
    '("Compute @{term}." . ("47" . 122))
    '("Extraction @{term}." . ("48" . 123))
    '("Recursive Extraction @{qualid+}." . ("48" . 124))
    '("Print Assumptions @{qualid}." . ("49" . 125))
    '("Print Opaque Dependencies @{qualid}." . ("49" . 126))
    '("Print Transparent Dependencies @{qualid}." . ("49" . 127))
    '("Print All Dependencies @{qualid}." . ("49" . 128))
    '("Search @{qualid}." . ("4a" . 129))
    '("Search \"@{str}\"." . ("4a" . 130))
    '("Search \"@{str}\"%@{delimkey}." . ("4a" . 131))
    '("Search @{termpattern}." . ("4a" . 132))
    '("Search @{termpatternorstr+}." . ("4a" . 133))
    '("Search -@{termpatternorstr+}." . ("4a" . 133))
    '("Search @{termpatternorstr+} inside @{module+}." . ("4a" . 134))
    '("Search @{termpatternorstr+} outside @{module+}." . ("4a" . 135))
    '("SearchAbout @{qualid}." . ("4a" . 137))
    '("SearchHead @{term}." . ("4b" . 138))
    '("SearchHead @{term} inside @{module+}." . ("4b" . 139))
    '("SearchHead @{term} outside @{module+}." . ("4b" . 140))
    '("SearchPattern @{term}." . ("4c" . 142))
    '("SearchPattern @{term} inside @{module+}." . ("4c" . 143))
    '("SearchPattern @{term} outside @{module+}." . ("4c" . 144))
    '("SearchRewrite @{term}." . ("4d" . 146))
    '("SearchRewrite @{term} inside @{module+}." . ("4d" . 147))
    '("SearchRewrite @{term} outside @{module+}." . ("4d" . 148))
    '("Add Search Blacklist \"@{str}\"." . ("4d" . 150))
    '("Remove Search Blacklist \"@{str}\"." . ("4d" . 151))
    '("Locate @{qualid}." . ("4e" . 152))
    '("Locate Term @{qualid}." . ("4e" . 153))
    '("Locate Module @{qualid}." . ("4e" . 154))
    '("Locate Ltac @{qualid}." . ("4e" . 155))
    '("Load @{ident}." . ("4g" . 156))
    '("Load \"@{str}\"." . ("4g" . 157))
    '("Load Verbose @{ident}." . ("4g" . 158))
    '("Load Verbose \"@{str}\"." . ("4g" . 159))
    '("Require @{qualid}." . ("4i" . 160))
    '("Require Import @{qualid}." . ("4i" . 161))
    '("Require Export @{qualid}." . ("4i" . 162))
    '("Print Libraries." . ("4j" . 164))
    '("Declare ML Module \"@{str+}\"." . ("4k" . 165))
    '("Local Declare ML Module \"@{str+}\"." . ("4k" . 166))
    '("Print ML Modules." . ("4l" . 167))
    '("Pwd." . ("4n" . 168))
    '("Cd \"@{str}\"." . ("4o" . 169))
    '("Cd." . ("4o" . 170))
    '("Add LoadPath \"@{str}\" as @{dirpath}." . ("4p" . 171))
    '("Add LoadPath \"@{str}\"." . ("4p" . 172))
    '("Add Rec LoadPath \"@{str}\" as @{dirpath}." . ("4q" . 173))
    '("Add Rec LoadPath \"@{str}\"." . ("4q" . 174))
    '("Remove LoadPath \"@{str}\"." . ("4r" . 175))
    '("Print LoadPath." . ("4s" . 176))
    '("Print LoadPath @{dirpath}." . ("4s" . 177))
    '("Add ML Path \"@{str}\"." . ("4t" . 178))
    '("Add Rec ML Path \"@{str}\"." . ("4u" . 179))
    '("Print ML Path \"@{str}\"." . ("4v" . 180))
    '("Locate File \"@{str}\"." . ("4w" . 181))
    '("Locate Library @{dirpath}." . ("4x" . 182))
    '("Reset @{ident}." . ("4z" . 183))
    '("Back." . ("50" . 184))
    '("Back @{n}." . ("50" . 185))
    '("BackTo @{num}." . ("51" . 186))
    '("Backtrack @{num} @{num} @{num}." . ("51" . 187))
    '("Quit." . ("53" . 188))
    '("Drop." . ("54" . 189))
    '("Time @{command}." . ("55" . 190))
    '("Timeout @{int} @{command}." . ("56" . 191))
    '("Test Default Timeout." . ("57" . 192))
    '("Unset Default Timeout." . ("57" . 192))
    '("Set Default Timeout @{int}." . ("57" . 192))
    '("Set Silent." . ("5b" . 195))
    '("Test Silent." . ("5b" . 195))
    '("Unset Silent." . ("5b" . 195))
    '("Test Printing Width." . ("5d" . 197))
    '("Unset Printing Width." . ("5d" . 197))
    '("Set Printing Width @{integer}." . ("5d" . 197))
    '("Test Printing Depth." . ("5g" . 200))
    '("Unset Printing Depth." . ("5g" . 200))
    '("Set Printing Depth @{integer}." . ("5g" . 200))
    '("Opaque @{qualid+}." . ("5k" . 203))
    '("Global Opaque @{qualid+}." . ("5k" . 204))
    '("Transparent @{qualid+}." . ("5l" . 205))
    '("Strategy @{level} [@{qualid+}]." . ("5m" . 206))
    '("Print Strategy @{qualid}." . ("5n" . 207))
    '("Print Strategies." . ("5n" . 208))
    '("Declare Reduction @{ident} := @{convtactic}." . ("5o" . 209))
    '("Set Virtual Machine." . ("5p" . 210))
    '("Test Virtual Machine." . ("5p" . 210))
    '("Unset Virtual Machine." . ("5p" . 210))
    '("Local." . ("5t" . 213))
    '("Global." . ("5t" . 214))))

(defconst company-coq-abbrevs-RefMan-pro
  (list 
    '("Theorem @{ident} : @{form}." . ("5v" . 215))
    '("Theorem @{ident} @{binders} : @{form}." . ("5v" . 215))
    '("Goal @{form}." . ("5w" . 216))
    '("Qed." . ("5x" . 217))
    '("Defined." . ("5x" . 218))
    '("Save." . ("5x" . 219))
    '("Save @{ident}." . ("5x" . 220))
    '("Save Theorem @{ident}." . ("5x" . 221))
    '("Save Lemma @{ident}." . ("5x" . 222))
    '("Save Remark @{ident}." . ("5x" . 223))
    '("Save Fact @{ident}." . ("5x" . 224))
    '("Save Corollary @{ident}." . ("5x" . 225))
    '("Save Proposition @{ident}." . ("5x" . 226))
    '("Admitted." . ("5y" . 227))
    '("Proof @{term}." . ("5z" . 228))
    '("Proof." . ("5z" . 229))
    '("Proof using @{ident+}." . ("60" . 230))
    '("Proof using @{ident+} with @{tac}." . ("60" . 231))
    '("Proof using All." . ("60" . 232))
    '("Proof using Type." . ("60" . 233))
    '("Proof using." . ("60" . 234))
    '("Proof using -(@{ident+})." . ("60" . 235))
    '("Proof using @{collection} + @{collection}." . ("60" . 236))
    '("Proof using @{collection} -@{collection}." . ("60" . 237))
    '("Proof using @{collection} -(@{ident+})." . ("60" . 238))
    '("Test Default Proof Using \"\"." . ("60" . 239))
    '("Unset Default Proof Using \"\"." . ("60" . 239))
    '("Set Default Proof Using \"@{expression}\"." . ("60" . 239))
    '("Set Suggest Proof Using." . ("60" . 240))
    '("Test Suggest Proof Using." . ("60" . 240))
    '("Unset Suggest Proof Using." . ("60" . 240))
    '("Abort." . ("61" . 241))
    '("Abort @{ident}." . ("61" . 242))
    '("Abort All." . ("61" . 243))
    '("Existential @{num} := @{term}." . ("62" . 244))
    '("Grab Existential Variables." . ("63" . 245))
    '("Undo." . ("65" . 246))
    '("Undo @{num}." . ("65" . 247))
    '("Restart." . ("66" . 248))
    '("Focus." . ("67" . 249))
    '("Focus @{num}." . ("67" . 250))
    '("Unfocus." . ("68" . 251))
    '("Unfocused." . ("69" . 252))
    '("Show." . ("6d" . 253))
    '("Show @{num}." . ("6d" . 254))
    '("Show Script." . ("6d" . 255))
    '("Show Proof." . ("6d" . 256))
    '("Show Conjectures." . ("6d" . 257))
    '("Show Intro." . ("6d" . 258))
    '("Show Intros." . ("6d" . 259))
    '("Show Existentials." . ("6d" . 260))
    '("Guarded." . ("6e" . 261))
    '("Test Hyps Limit." . ("6g" . 262))
    '("Unset Hyps Limit." . ("6g" . 262))
    '("Set Hyps Limit @{num}." . ("6g" . 262))
    '("Set Automatic Introduction." . ("6i" . 264))
    '("Test Automatic Introduction." . ("6i" . 264))
    '("Unset Automatic Introduction." . ("6i" . 264))
    '("Optimize Proof." . ("6k" . 266))
    '("Optimize Heap." . ("6l" . 267))))

(defconst company-coq-abbrevs-RefMan-tac
  (list 
    '("Test Default Goal Selector." . ("6o" . 268))
    '("Unset Default Goal Selector." . ("6o" . 268))
    '("Set Default Goal Selector @{selector}." . ("6o" . 268))
    '("exact @{term}" . ("6t" . 270))
    '("eexact @{term}" . ("6t" . 271))
    '("assumption" . ("6u" . 272))
    '("eassumption" . ("6u" . 273))
    '("refine @{term}" . ("6v" . 274))
    '("apply @{term}" . ("6w" . 275))
    '("apply @{term} with @{term+}" . ("6w" . 276))
    '("apply @{term} with (@{vref&} := @{term&})" . ("6w" . 277))
    '("apply @{term,+}" . ("6w" . 278))
    '("eapply @{term}" . ("6w" . 279))
    '("simple apply @{term}" . ("6w" . 280))
    '("lapply @{term}" . ("6w" . 281))
    '("apply @{term} in @{ident}" . ("6x" . 282))
    '("apply @{term+} in @{ident}" . ("6x" . 283))
    '("apply @{term&} with @{bindinglist&} in @{ident}" . ("6x" . 284))
    '("eapply @{term&} with @{bindinglist&} in @{ident}" . ("6x" . 285))
    '("apply @{term&} with @{bindinglist&} in @{ident} as @{intropattern}" . ("6x" . 286))
    '("eapply @{term&} with @{bindinglist&} in @{ident} as @{intropattern}" . ("6x" . 287))
    '("simple apply @{term} in @{ident}" . ("6x" . 288))
    '("apply @{term&} in @{ident}" . ("6x" . 289))
    '("simple apply @{term&} in @{ident}" . ("6x" . 289))
    '("apply @{term&} in @{ident} as @{intropattern}" . ("6x" . 289))
    '("simple apply @{term&} in @{ident} as @{intropattern}" . ("6x" . 289))
    '("simple apply @{term&} with @{bindinglist&} in @{ident}" . ("6x" . 289))
    '("simple apply @{term&} with @{bindinglist&} in @{ident} as @{intropattern}" . ("6x" . 289))
    '("constructor @{num}" . ("6y" . 290))
    '("constructor" . ("6y" . 291))
    '("constructor @{num} with" . ("6y" . 292))
    '("split" . ("6y" . 293))
    '("exists @{bindinglist}" . ("6y" . 294))
    '("exists @{bindinglist+}" . ("6y" . 295))
    '("left" . ("6y" . 296))
    '("right" . ("6y" . 297))
    '("left with @{bindinglist}" . ("6y" . 298))
    '("right with @{bindinglist}" . ("6y" . 299))
    '("split with @{bindinglist}" . ("6y" . 300))
    '("econstructor" . ("6y" . 301))
    '("eexists" . ("6y" . 302))
    '("esplit" . ("6y" . 303))
    '("eleft" . ("6y" . 304))
    '("eright" . ("6y" . 305))
    '("intro" . ("70" . 306))
    '("intros" . ("70" . 307))
    '("intro @{ident}" . ("70" . 308))
    '("intros @{ident+}" . ("70" . 309))
    '("intros until @{ident}" . ("70" . 310))
    '("intros until @{num}" . ("70" . 311))
    '("intro after @{ident}" . ("70" . 312))
    '("intro before @{ident}" . ("70" . 313))
    '("intro at top" . ("70" . 314))
    '("intro at bottom" . ("70" . 315))
    '("intro @{ident} after @{ident}" . ("70" . 316))
    '("intro @{ident} before @{ident}" . ("70" . 317))
    '("intro @{ident} at top" . ("70" . 318))
    '("intro @{ident} at bottom" . ("70" . 319))
    '("intros @{intropattern+}" . ("72" . 320))
    '("clear @{ident}" . ("73" . 321))
    '("clear @{ident+}" . ("73" . 322))
    '("clearbody @{ident}" . ("73" . 323))
    '("clear -@{ident+}" . ("73" . 324))
    '("clear" . ("73" . 325))
    '("clear dependent @{ident}" . ("73" . 326))
    '("revert @{ident+}" . ("74" . 327))
    '("revert dependent @{ident}" . ("74" . 328))
    '("move @{ident} after @{ident}" . ("75" . 329))
    '("move @{ident} before @{ident}" . ("75" . 330))
    '("move @{ident} at top" . ("75" . 331))
    '("move @{ident} at bottom" . ("75" . 332))
    '("rename @{ident} into @{ident}" . ("76" . 333))
    '("rename @{ident,&} into @{ident,&}" . ("76" . 334))
    '("set (@{ident} := @{term})" . ("77" . 335))
    '("set (@{ident} := @{term}) in @{occgoalset}" . ("77" . 336))
    '("set (@{ident} @{binder+} := @{term})" . ("77" . 337))
    '("set @{term}" . ("77" . 338))
    '("set (@{ident} @{binder+} := @{term}) in @{occgoalset}" . ("77" . 339))
    '("set @{term} in @{occgoalset}" . ("77" . 340))
    '("remember @{term} as @{ident}" . ("77" . 341))
    '("remember @{term} as @{ident} eqn:@{ident}" . ("77" . 342))
    '("remember @{term} as @{ident} in @{occgoalset}" . ("77" . 343))
    '("pose (@{ident} := @{term})" . ("77" . 344))
    '("pose (@{ident} @{binder+} := @{term})" . ("77" . 345))
    '("pose @{term}" . ("77" . 346))
    '("decompose [@{qualid+}] @{term}" . ("78" . 347))
    '("decompose sum @{term}" . ("78" . 348))
    '("decompose record @{term}" . ("78" . 349))
    '("assert (@{ident} : @{form})" . ("7a" . 350))
    '("assert @{form}" . ("7a" . 351))
    '("assert @{form} by @{tac}" . ("7a" . 352))
    '("assert @{form} as @{intropattern}" . ("7a" . 353))
    '("assert @{form} as @{intropattern} by @{tac}" . ("7a" . 354))
    '("assert (@{ident} := @{term})" . ("7a" . 355))
    '("pose proof @{term} as @{intropattern}" . ("7a" . 356))
    '("enough (@{ident} : @{form})" . ("7a" . 357))
    '("enough @{form}" . ("7a" . 358))
    '("enough @{form} as @{intropattern}" . ("7a" . 359))
    '("enough (@{ident} : @{form}) by @{tac}" . ("7a" . 360))
    '("enough @{form} by @{tac}" . ("7a" . 361))
    '("enough @{form} as @{intropattern} by @{tac}" . ("7a" . 362))
    '("cut @{form}" . ("7a" . 363))
    '("specialize (@{ident} @{term+})" . ("7a" . 364))
    '("specialize @{ident} with @{bindinglist}" . ("7a" . 365))
    '("generalize @{term}" . ("7c" . 366))
    '("generalize @{term,+}" . ("7c" . 367))
    '("generalize @{term} at @{num+}" . ("7c" . 368))
    '("generalize @{term} as @{ident}" . ("7c" . 369))
    '("generalize @{term,&} at @{num+,&} as @{ident,&}" . ("7c" . 370))
    '("generalize dependent @{term}" . ("7c" . 371))
    '("evar (@{ident} : @{term})" . ("7d" . 372))
    '("instantiate (@{num} := @{term})" . ("7e" . 373))
    '("instantiate (@{num} := @{term}) in @{ident}" . ("7e" . 374))
    '("instantiate (@{num} := @{term}) in (Value of @{ident})" . ("7e" . 375))
    '("instantiate (@{num} := @{term}) in (Type of @{ident})" . ("7e" . 376))
    '("instantiate" . ("7e" . 377))
    '("admit" . ("7f" . 378))
    '("absurd @{term}" . ("7g" . 379))
    '("contradiction" . ("7h" . 380))
    '("contradiction @{ident}" . ("7h" . 381))
    '("contradict @{ident}" . ("7i" . 382))
    '("exfalso" . ("7j" . 383))
    '("destruct @{term}" . ("7l" . 384))
    '("destruct @{term,+}" . ("7l" . 385))
    '("destruct @{term} as @{disjconjintropattern}" . ("7l" . 386))
    '("destruct @{term} eqn:@{namingintropattern}" . ("7l" . 387))
    '("destruct @{term} with @{bindinglist}" . ("7l" . 388))
    '("edestruct @{term}" . ("7l" . 389))
    '("destruct @{term} using @{term}" . ("7l" . 390))
    '("destruct @{term} using @{term} with @{bindinglist}" . ("7l" . 391))
    '("destruct @{term} in @{occgoalset}" . ("7l" . 392))
    '("destruct @{term} with @{bindinglist} as @{disjconjintropattern} eqn:@{namingintropattern} using @{term} with @{bindinglist} in @{occgoalset}" . ("7l" . 393))
    '("edestruct @{term} with @{bindinglist} as @{disjconjintropattern} eqn:@{namingintropattern} using @{term} with @{bindinglist} in @{occgoalset}" . ("7l" . 394))
    '("destruct! @{ident}" . ("7l" . 395))
    '("case @{term}" . ("7l" . 396))
    '("case @{term} with @{bindinglist}" . ("7l" . 397))
    '("ecase @{term}" . ("7l" . 398))
    '("ecase @{term} with @{bindinglist}" . ("7l" . 399))
    '("simple destruct @{ident}" . ("7l" . 400))
    '("simple destruct @{num}" . ("7l" . 401))
    '("case_eq @{term}" . ("7l" . 402))
    '("induction @{term}" . ("7m" . 403))
    '("induction @{term} as @{disjconjintropattern}" . ("7m" . 404))
    '("induction @{term} with @{bindinglist}" . ("7m" . 405))
    '("einduction @{term}" . ("7m" . 406))
    '("induction @{term} using @{term}" . ("7m" . 407))
    '("induction @{term} using @{term} with @{bindinglist}" . ("7m" . 408))
    '("induction @{term,+} using @{qualid}" . ("7m" . 409))
    '("induction @{term} in @{occgoalset}" . ("7m" . 410))
    '("induction @{term} with @{bindinglist} as @{disjconjintropattern} using @{term} with @{bindinglist} in @{occgoalset}" . ("7m" . 411))
    '("einduction @{term} with @{bindinglist} as @{disjconjintropattern} using @{term} with @{bindinglist} in @{occgoalset}" . ("7m" . 412))
    '("induction! @{ident}" . ("7m" . 413))
    '("elim @{term}" . ("7m" . 414))
    '("elim @{term} with @{bindinglist}" . ("7m" . 415))
    '("eelim @{term}" . ("7m" . 416))
    '("elim @{term} using @{term}" . ("7m" . 417))
    '("elim @{term} using @{term} with @{bindinglist}" . ("7m" . 418))
    '("elim @{term} with @{bindinglist} using @{term} with @{bindinglist}" . ("7m" . 419))
    '("eelim @{term} with @{bindinglist} using @{term} with @{bindinglist}" . ("7m" . 420))
    '("elimtype @{form}" . ("7m" . 421))
    '("simple induction @{ident}" . ("7m" . 422))
    '("simple induction @{num}" . ("7m" . 423))
    '("double induction @{ident} @{ident}" . ("7n" . 424))
    '("double induction @{num} @{num}" . ("7n" . 425))
    '("dependent induction @{ident}" . ("7o" . 426))
    '("dependent induction @{ident} generalizing @{ident+}" . ("7o" . 427))
    '("dependent destruction @{ident}" . ("7o" . 428))
    '("functional induction (@{qualid} @{term+})" . ("7p" . 429))
    '("functional induction (@{qualid} @{term+}) as @{disjconjintropattern} using @{term} with @{bindinglist}" . ("7p" . 430))
    '("discriminate @{term}" . ("7q" . 431))
    '("discriminate @{num}" . ("7q" . 432))
    '("discriminate @{term} with @{bindinglist}" . ("7q" . 433))
    '("ediscriminate @{num}" . ("7q" . 434))
    '("ediscriminate @{term}" . ("7q" . 435))
    '("ediscriminate @{term} with @{bindinglist}" . ("7q" . 435))
    '("discriminate" . ("7q" . 436))
    '("injection @{term}" . ("7s" . 437))
    '("injection @{num}" . ("7s" . 438))
    '("injection @{term} with @{bindinglist}" . ("7s" . 439))
    '("einjection @{num}" . ("7s" . 440))
    '("einjection @{term}" . ("7s" . 441))
    '("einjection @{term} with @{bindinglist}" . ("7s" . 441))
    '("injection" . ("7s" . 442))
    '("injection @{term} as @{intropattern+}" . ("7s" . 443))
    '("injection @{term} with @{bindinglist} as @{intropattern+}" . ("7s" . 443))
    '("injection @{num} as @{intropattern+}" . ("7s" . 444))
    '("injection as @{intropattern+}" . ("7s" . 445))
    '("einjection @{term} as @{intropattern+}" . ("7s" . 446))
    '("einjection @{term} with @{bindinglist} as @{intropattern+}" . ("7s" . 446))
    '("einjection @{num} as @{intropattern+}" . ("7s" . 447))
    '("einjection as @{intropattern+}" . ("7s" . 448))
    '("inversion @{ident}" . ("7t" . 449))
    '("inversion @{num}" . ("7t" . 450))
    '("inversion_clear @{ident}" . ("7t" . 451))
    '("inversion @{ident} as @{intropattern}" . ("7t" . 452))
    '("inversion @{num} as @{intropattern}" . ("7t" . 453))
    '("inversion_clear @{ident} as @{intropattern}" . ("7t" . 454))
    '("inversion @{ident} in @{ident+}" . ("7t" . 455))
    '("inversion @{ident} as @{intropattern} in @{ident+}" . ("7t" . 456))
    '("inversion_clear @{ident} in @{ident+}" . ("7t" . 457))
    '("inversion_clear @{ident} as @{intropattern} in @{ident+}" . ("7t" . 458))
    '("dependent inversion @{ident}" . ("7t" . 459))
    '("dependent inversion @{ident} as @{intropattern}" . ("7t" . 460))
    '("dependent inversion_clear @{ident}" . ("7t" . 461))
    '("dependent inversion_clear @{ident} as @{intropattern}" . ("7t" . 462))
    '("dependent inversion @{ident} with @{term}" . ("7t" . 463))
    '("dependent inversion @{ident} as @{intropattern} with @{term}" . ("7t" . 464))
    '("dependent inversion_clear @{ident} with @{term}" . ("7t" . 466))
    '("dependent inversion_clear @{ident} as @{intropattern} with @{term}" . ("7t" . 467))
    '("simple inversion @{ident}" . ("7t" . 468))
    '("simple inversion @{ident} as @{intropattern}" . ("7t" . 469))
    '("inversion @{ident} using @{ident}" . ("7t" . 470))
    '("inversion @{ident} using @{ident} in @{ident+}" . ("7t" . 471))
    '("fix @{ident} @{num}" . ("7u" . 472))
    '("fix @{ident} @{num} with (@{ident&} @{binder+&} : @{type&})" . ("7u" . 473))
    '("fix @{ident} @{num} with (@{ident&} @{binder+&} { struct @{ident&} } : @{type&})" . ("7u" . 473))
    '("cofix @{ident}" . ("7v" . 474))
    '("cofix @{ident} with (@{ident&} @{binder+&} : @{type&})" . ("7v" . 475))
    '("rewrite @{term}" . ("7x" . 476))
    '("rewrite -> @{term}" . ("7x" . 477))
    '("rewrite <- @{term}" . ("7x" . 478))
    '("rewrite @{term} in @{clause}" . ("7x" . 479))
    '("rewrite @{term} at @{occlist}" . ("7x" . 480))
    '("rewrite @{term} by @{tac}" . ("7x" . 481))
    '("rewrite @{term,+}" . ("7x" . 482))
    '("erewrite @{term}" . ("7x" . 483))
    '("replace @{term} with @{term}" . ("7y" . 484))
    '("replace @{term} with @{term} by @{tac}" . ("7y" . 485))
    '("replace @{term}" . ("7y" . 486))
    '("replace -> @{term}" . ("7y" . 487))
    '("replace <- @{term}" . ("7y" . 488))
    '("replace @{term} with @{term} in @{clause}" . ("7y" . 489))
    '("replace @{term} with @{term} in @{clause} by @{tac}" . ("7y" . 490))
    '("replace @{term} in @{clause}" . ("7y" . 491))
    '("replace -> @{term} in @{clause}" . ("7y" . 492))
    '("replace <- @{term} in @{clause}" . ("7y" . 493))
    '("cutrewrite <- (@{term} = @{term})" . ("7y" . 494))
    '("cutrewrite -> (@{term} = @{term})" . ("7y" . 495))
    '("subst @{ident}" . ("7z" . 496))
    '("subst @{ident+}" . ("7z" . 497))
    '("stepl @{term}" . ("80" . 498))
    '("stepl @{term} by @{tac}" . ("80" . 499))
    '("stepr @{term}" . ("80" . 500))
    '("stepr @{term} by @{tac}" . ("80" . 501))
    '("Declare Right Step @{term}." . ("80" . 502))
    '("change @{term}" . ("81" . 503))
    '("change @{term} with @{term}" . ("81" . 504))
    '("change @{term} at @{num+} with @{term}" . ("81" . 505))
    '("change @{term} in @{ident}" . ("81" . 506))
    '("change @{term} with @{term} in @{ident}" . ("81" . 507))
    '("change @{term} at @{num+} with @{term} in @{ident}" . ("81" . 508))
    '("cbv @{flag+}" . ("83" . 509))
    '("lazy @{flag+}" . ("83" . 510))
    '("compute" . ("83" . 511))
    '("cbv" . ("83" . 513))
    '("lazy" . ("83" . 514))
    '("compute [@{qualid+}]" . ("83" . 515))
    '("cbv [@{qualid+}]" . ("83" . 516))
    '("compute -[@{qualid+}]" . ("83" . 517))
    '("cbv -[@{qualid+}]" . ("83" . 518))
    '("lazy [@{qualid+}]" . ("83" . 519))
    '("lazy -[@{qualid+}]" . ("83" . 520))
    '("vm_compute" . ("83" . 521))
    '("native_compute" . ("83" . 522))
    '("red" . ("84" . 523))
    '("hnf" . ("85" . 524))
    '("cbn" . ("86" . 525))
    '("simpl" . ("86" . 526))
    '("cbn [@{qualid+}]" . ("86" . 527))
    '("cbn -[@{qualid+}]" . ("86" . 528))
    '("simpl @{pattern}" . ("86" . 529))
    '("simpl @{pattern} at @{num+}" . ("86" . 530))
    '("simpl @{qualid}" . ("86" . 531))
    '("simpl @{qstring}" . ("86" . 532))
    '("simpl @{qualid} at @{num+}" . ("86" . 533))
    '("simpl @{qstring} at @{num+}" . ("86" . 534))
    '("unfold @{qualid}" . ("87" . 535))
    '("unfold @{qualid,+}" . ("87" . 536))
    '("unfold @{qualid,&} at @{num,+,&}" . ("87" . 537))
    '("unfold @{qstring}" . ("87" . 538))
    '("unfold @{qstring}%@{delimkey}" . ("87" . 539))
    '("unfold @{qualidorstring,&} at @{num,+,&}" . ("87" . 540))
    '("fold @{term}" . ("88" . 541))
    '("fold" . ("88" . 542))
    '("pattern @{term}" . ("89" . 543))
    '("pattern @{term} at @{num+}" . ("89" . 544))
    '("pattern @{term} at -@{num+}" . ("89" . 545))
    '("pattern @{term,+}" . ("89" . 546))
    '("pattern @{term,&} at @{num+,&}" . ("89" . 547))
    '("pattern" . ("89" . 548))
    '("auto" . ("8c" . 549))
    '("auto @{num}" . ("8c" . 550))
    '("auto with @{ident+}" . ("8c" . 551))
    '("auto with *" . ("8c" . 552))
    '("auto using @{lemma,+}" . ("8c" . 553))
    '("auto using @{lemma,+} with @{ident+}" . ("8c" . 554))
    '("trivial" . ("8c" . 555))
    '("trivial with @{ident+}" . ("8c" . 556))
    '("trivial with *" . ("8c" . 557))
    '("eauto" . ("8d" . 558))
    '("autounfold with @{ident+}" . ("8e" . 559))
    '("autounfold with @{ident+} in @{clause}" . ("8e" . 560))
    '("autounfold with *" . ("8e" . 561))
    '("autorewrite with @{ident+}" . ("8f" . 562))
    '("autorewrite with @{ident+} using @{tac}" . ("8f" . 563))
    '("autorewrite with @{ident+} in @{qualid}" . ("8f" . 564))
    '("autorewrite with @{ident+} in @{qualid} using @{tac}" . ("8f" . 565))
    '("autorewrite with @{ident+} in @{clause}" . ("8f" . 566))
    '("Create HintDb @{ident} [discriminated]." . ("8i" . 567))
    '("Hint @{hintdef} : @{ident+}." . ("8i" . 568))
    '("Hint @{hintdef}." . ("8i" . 569))
    '("Local Hint @{hintdef} : @{ident+}." . ("8i" . 570))
    '("Local Hint @{hintdef}." . ("8i" . 571))
    '("Resolve @{term}." . ("8i" . 572))
    '("Resolve @{term+}." . ("8i" . 573))
    '("Immediate @{term+}." . ("8i" . 574))
    '("Constructors @{ident+}." . ("8i" . 575))
    '("Unfold @{ident+}." . ("8i" . 576))
    '("Hint Local @{hintdef} : @{ident+}." . ("8i" . 578))
    '("Hint Local @{hintdef}." . ("8i" . 579))
    '("Remove Hints @{term+} : @{ident+}." . ("8k" . 580))
    '("Print Hint." . ("8l" . 581))
    '("Print Hint @{ident}." . ("8l" . 582))
    '("Print Hint *." . ("8l" . 583))
    '("Print HintDb @{ident}." . ("8l" . 584))
    '("Hint Rewrite @{term+} : @{ident+}." . ("8m" . 585))
    '("Hint Rewrite -> @{term+} : @{ident+}." . ("8m" . 586))
    '("Hint Rewrite <- @{term+} : @{ident+}." . ("8m" . 587))
    '("Hint Rewrite @{term+} using @{tac} : @{ident+}." . ("8m" . 588))
    '("Print Rewrite HintDb @{ident}." . ("8m" . 589))
    '("Proof with @{tac}." . ("8o" . 590))
    '("Proof with @{tac} using @{ident+}." . ("8o" . 591))
    '("Proof using @{ident+} with @{tac}." . ("8o" . 592))
    '("Declare Implicit Tactic @{tac}." . ("8o" . 593))
    '("tauto" . ("8q" . 594))
    '("intuition @{tac}" . ("8r" . 595))
    '("intuition" . ("8r" . 596))
    '("rtauto" . ("8s" . 597))
    '("firstorder" . ("8t" . 598))
    '("firstorder @{tac}" . ("8t" . 599))
    '("firstorder with @{ident+}" . ("8t" . 600))
    '("firstorder using @{qualid,+}" . ("8t" . 601))
    '("firstorder using @{qualid,+} with @{ident+}" . ("8t" . 602))
    '("congruence" . ("8u" . 603))
    '("congruence @{n}" . ("8u" . 604))
    '("congruence with @{term+}" . ("8u" . 605))
    '("constr_eq @{term} @{term}" . ("8w" . 606))
    '("unify @{term} @{term}" . ("8x" . 607))
    '("unify @{term} @{term} with @{ident}" . ("8x" . 608))
    '("is_evar @{term}" . ("8y" . 609))
    '("has_evar @{term}" . ("8z" . 610))
    '("is_var @{term}" . ("90" . 611))
    '("f_equal" . ("92" . 612))
    '("reflexivity" . ("93" . 613))
    '("symmetry" . ("94" . 614))
    '("symmetry in @{ident}" . ("94" . 615))
    '("transitivity @{term}" . ("95" . 616))
    '("decide equality" . ("97" . 617))
    '("compare @{term} @{term}" . ("98" . 618))
    '("simplify_eq @{term}" . ("99" . 619))
    '("simplify_eq @{num}" . ("99" . 620))
    '("simplify_eq" . ("99" . 621))
    '("esimplify_eq @{num}" . ("99" . 622))
    '("esimplify_eq @{term}" . ("99" . 623))
    '("esimplify_eq @{term} with @{bindinglist}" . ("99" . 623))
    '("dependent rewrite -> @{ident}" . ("9a" . 625))
    '("dependent rewrite <- @{ident}" . ("9a" . 626))
    '("functional inversion @{ident}" . ("9c" . 627))
    '("functional inversion @{num}" . ("9c" . 628))
    '("functional inversion @{ident} @{qualid}" . ("9c" . 629))
    '("quote @{ident}" . ("9d" . 630))
    '("quote @{ident} [@{ident+}]" . ("9d" . 631))
    '("classical_left" . ("9f" . 632))
    '("classical_right" . ("9f" . 633))
    '("btauto" . ("9h" . 634))
    '("omega" . ("9i" . 635))
    '("ring" . ("9j" . 636))
    '("ring_simplify @{term+}" . ("9j" . 637))
    '("field" . ("9k" . 638))
    '("field_simplify @{term+}" . ("9k" . 639))
    '("field_simplify_eq" . ("9k" . 640))
    '("fourier" . ("9l" . 641))
    '("cycle @{num}" . ("9n" . 642))
    '("swap @{num} @{num}" . ("9o" . 643))
    '("revgoals" . ("9p" . 644))
    '("shelve" . ("9q" . 645))
    '("shelve_unifiable" . ("9q" . 646))
    '("Unshelve." . ("9r" . 647))
    '("give_up" . ("9s" . 648))))

(defconst company-coq-abbrevs-RefMan-ltac
  (list 
    '("do @{num} @{tacexpr}" . ("9x" . 649))
    '("repeat @{tacexpr}" . ("9x" . 650))
    '("try @{tacexpr}" . ("9x" . 651))
    '("progress @{tacexpr}" . ("9x" . 652))
    '("tryif @{tacexpr} then @{tacexpr} else @{tacexpr}" . ("9x" . 653))
    '("once @{tacexpr}" . ("9x" . 654))
    '("exactly_once @{tacexpr}" . ("9x" . 655))
    '("solve [@{tacexpr|+}]" . ("9x" . 656))
    '("idtac" . ("9x" . 657))
    '("idtac @{messagetoken+}" . ("9x" . 658))
    '("fail" . ("9x" . 659))
    '("fail @{n}" . ("9x" . 660))
    '("fail @{messagetoken+}" . ("9x" . 661))
    '("fail @{n} @{messagetoken+}" . ("9x" . 662))
    '("gfail" . ("9x" . 663))
    '("gfail @{messagetoken+}" . ("9x" . 664))
    '("gfail @{n} @{messagetoken+}" . ("9x" . 665))
    '("timeout @{num} @{tacexpr}" . ("9x" . 666))
    '("time @{qstring} @{tacexpr}" . ("9x" . 667))
    '("@{qualid} @{tacarg+}" . ("9x" . 668))
    '("fun @{ident+} => @{tacexpr}" . ("9x" . 669))
    '("context @{ident} [@{cpattern}]" . ("9x" . 670))
    '("appcontext @{ident} [@{cpattern}]" . ("9x" . 671))
    '("context @{ident} [@{tacexpr}]" . ("9x" . 672))
    '("fresh @{component+}" . ("9x" . 673))
    '("eval @{redexpr} in @{term}" . ("9x" . 674))
    '("type of @{term}" . ("9x" . 675))
    '("uconstr : @{term}" . ("9x" . 676))
    '("type_term @{term}" . ("9x" . 677))
    '("guard @{test}" . ("9x" . 678))
    '("abstract @{tacexpr}" . ("9x" . 679))
    '("Qed export." . ("9x" . 680))
    '("Qed export @{ident,+}." . ("9x" . 681))
    '("abstract @{tacexpr} using @{ident}" . ("9x" . 682))
    '("Print Ltac @{qualid}." . ("a0" . 683))
    '("Info @{num} @{tacexpr}." . ("a2" . 684))
    '("Test Info Level." . ("a2" . 685))
    '("Unset Info Level." . ("a2" . 685))
    '("Set Info Level @{num}." . ("a2" . 685))
    '("Unset Info Level @{num}." . ("a2" . 686))
    '("Set Ltac Debug." . ("a3" . 687))
    '("Test Ltac Debug." . ("a3" . 687))
    '("Unset Ltac Debug." . ("a3" . 687))))

(defconst company-coq-abbrevs-RefMan-tacex
  (list 
    '("specialize_eqs" . ("a6" . 689))))

(defconst company-coq-abbrevs-RefMan-decl
  (list 
    ))

(defconst company-coq-abbrevs-RefMan-syn
  (list 
    '("Print Grammar pattern." . ("bb" . 690))
    '("Open Scope @{scope}." . ("bn" . 691))
    '("Close Scope @{scope}." . ("bn" . 692))
    '("Local Open Scope @{scope}." . ("bn" . 693))
    '("Local Close Scope @{scope}." . ("bn" . 694))
    '("Global Open Scope @{scope}." . ("bn" . 695))
    '("Global Close Scope @{scope}." . ("bn" . 696))
    '("Arguments @{qualid} @{name&}%@{scope&}." . ("bo" . 697))
    '("Arguments @{qualid} : clear scopes." . ("bo" . 698))
    '("Global Arguments @{qualid} @{name&}%@{scope&}." . ("bo" . 699))
    '("Local Arguments @{qualid} @{name&}%@{scope&}." . ("bo" . 700))
    '("Bind Scope @{scope} with @{qualid}." . ("bo" . 701))
    '("Print Scopes." . ("bq" . 702))
    '("Print Scope @{scope}." . ("bq" . 703))
    '("type_scope" . ("bq" . 704))
    '("nat_scope" . ("bq" . 705))
    '("N_scope." . ("bq" . 706))
    '("Z_scope." . ("bq" . 707))
    '("positive_scope" . ("bq" . 708))
    '("Q_scope." . ("bq" . 709))
    '("Qc_scope." . ("bq" . 710))
    '("real_scope" . ("bq" . 711))
    '("bool_scope" . ("bq" . 712))
    '("list_scope" . ("bq" . 713))
    '("core_scope" . ("bq" . 714))
    '("string_scope" . ("bq" . 715))
    '("char_scope" . ("bq" . 716))
    '("Print Visibility." . ("br" . 717))
    '("Print Visibility @{scope}." . ("br" . 718))
    '("Notation @{ident&} @{ident&} := @{term}." . ("bs" . 721))
    '("Local Notation @{ident&} @{ident&} := @{term}." . ("bs" . 721))
    '("Notation @{ident&} @{ident&} := @{term} (only parsing)." . ("bs" . 721))
    '("Local Notation @{ident&} @{ident&} := @{term} (only parsing)." . ("bs" . 721))
    '("Tactic Notation @{taclevel} @{proditem+} := @{tac}." . ("bt" . 722))
    '("Print Grammar tactic." . ("bt" . 723))))

(defconst company-coq-abbrevs-RefMan-sch
  (list 
    ))

(defconst company-coq-abbrevs-RefMan-com
  (list 
    ))

(defconst company-coq-abbrevs-RefMan-uti
  (list 
    ))

(defconst company-coq-abbrevs-RefMan-ide
  (list 
    ))

(defconst company-coq-abbrevs-AddRefMan-pre
  (list 
    ))

(defconst company-coq-abbrevs-Cases
  (list 
    ))

(defconst company-coq-abbrevs-Coercion
  (list 
    ))

(defconst company-coq-abbrevs-CanonicalStructures
  (list 
    ))

(defconst company-coq-abbrevs-Classes
  (list 
    ))

(defconst company-coq-abbrevs-Omega
  (list 
    ))

(defconst company-coq-abbrevs-Micromega
  (list 
    '("psatz" . ("ez" . 724))
    '("lra" . ("f2" . 725))
    '("lia" . ("f6" . 726))
    '("nia" . ("f9" . 727))))

(defconst company-coq-abbrevs-Extraction
  (list 
    '("Extraction @{qualid}." . ("fb" . 728))
    '("Recursive Extraction @{qualid+}." . ("fb" . 729))
    '("Extraction \"@{file}\" @{qualid+}." . ("fb" . 730))
    '("Extraction Library @{ident}." . ("fb" . 731))
    '("Recursive Extraction Library @{ident}." . ("fb" . 732))
    '("Separate Extraction @{qualid+}." . ("fb" . 733))
    '("Extraction Language Ocaml." . ("fd" . 734))
    '("Extraction Language Haskell." . ("fd" . 735))
    '("Extraction Language Scheme." . ("fd" . 736))
    '("Set Extraction Optimize." . ("fe" . 737))
    '("Test Extraction Optimize." . ("fe" . 737))
    '("Unset Extraction Optimize." . ("fe" . 737))
    '("Set Extraction Conservative Types." . ("fe" . 739))
    '("Test Extraction Conservative Types." . ("fe" . 739))
    '("Unset Extraction Conservative Types." . ("fe" . 739))
    '("Set Extraction KeepSingleton." . ("fe" . 741))
    '("Test Extraction KeepSingleton." . ("fe" . 741))
    '("Unset Extraction KeepSingleton." . ("fe" . 741))
    '("Set Extraction AutoInline." . ("fe" . 743))
    '("Test Extraction AutoInline." . ("fe" . 743))
    '("Unset Extraction AutoInline." . ("fe" . 743))
    '("Extraction Inline @{qualid+}." . ("fe" . 745))
    '("Extraction NoInline @{qualid+}." . ("fe" . 746))
    '("Print Extraction Inline." . ("fe" . 747))
    '("Reset Extraction Inline." . ("fe" . 748))
    '("Extraction Implicit @{qualid} [@{ident+}]." . ("ff" . 749))
    '("Extract Constant @{qualid} => \"@{str}\"." . ("fg" . 750))
    '("Extract Inlined Constant @{qualid} => \"@{str}\"." . ("fg" . 751))
    '("Extract Constant @{qualid} \"@{str+}\" => \"@{str}\"." . ("fg" . 752))
    '("Extract Inductive @{qualid} => \"@{str}\" [\"@{str+}\"] @{optstring}." . ("fg" . 753))
    '("Extraction Blacklist @{ident+}." . ("fh" . 754))
    '("Print Extraction Blacklist." . ("fh" . 755))
    '("Reset Extraction Blacklist." . ("fh" . 756))))

(defconst company-coq-abbrevs-Program
  (list 
    ))

(defconst company-coq-abbrevs-Polynom
  (list 
    '("ring" . ("g1" . 757))
    '("ring_simplify" . ("g1" . 758))
    '("ring [@{term+}]" . ("g1" . 759))
    '("ring_simplify [@{term+}] @{t+} in @{ident}" . ("g1" . 760))
    '("Add Ring @{name} : @{ring} (@{mod,+})." . ("g2" . 761))
    '("field" . ("g4" . 762))
    '("field [@{term+}]" . ("g4" . 763))
    '("field_simplify" . ("g4" . 764))
    '("field_simplify [@{term+}]" . ("g4" . 765))
    '("field_simplify [@{term+}] @{term+}" . ("g4" . 766))
    '("field_simplify in @{hyp}" . ("g4" . 767))
    '("field_simplify [@{term+}] in @{hyp}" . ("g4" . 768))
    '("field_simplify [@{term+}] @{term+} in @{hyp}" . ("g4" . 769))
    '("field_simplify_eq" . ("g4" . 770))
    '("field_simplify_eq [@{term+}]" . ("g4" . 771))
    '("field_simplify_eq in @{hyp}" . ("g4" . 772))
    '("field_simplify_eq [@{term+}] in @{hyp}" . ("g4" . 773))
    '("Add Field @{name} : @{field} (@{mod,+})." . ("g5" . 774))))

(defconst company-coq-abbrevs-Nsatz
  (list 
    '("nsatz" . ("ga" . 775))
    '("nsatz with radicalmax := @{num}%N strategy := @{num}%Z parameters := @{listofvars} variables := @{listofvars}" . ("ga" . 776))))

(defconst company-coq-abbrevs-Setoid
  (list 
    '("setoid_reflexivity" . ("gm" . 777))
    '("setoid_symmetry" . ("gm" . 778))
    '("setoid_symmetry in @{ident}" . ("gm" . 778))
    '("setoid_transitivity" . ("gm" . 779))
    '("setoid_rewrite @{term}" . ("gm" . 780))
    '("setoid_rewrite @{term} in @{ident}" . ("gm" . 780))
    '("setoid_rewrite <- @{term}" . ("gm" . 781))
    '("setoid_rewrite <- @{term} in @{ident}" . ("gm" . 781))
    '("setoid_rewrite <- @{term} at @{occs}" . ("gm" . 782))
    '("setoid_rewrite <- @{term} at @{occs} in @{ident}" . ("gm" . 782))
    '("setoid_rewrite @{term} at @{occs}" . ("gm" . 783))
    '("setoid_rewrite @{orientation} @{term}" . ("gm" . 783))
    '("setoid_rewrite @{term} at @{occs} in @{ident}" . ("gm" . 783))
    '("setoid_rewrite @{orientation} @{term} at @{occs}" . ("gm" . 783))
    '("setoid_rewrite @{orientation} @{term} in @{ident}" . ("gm" . 783))
    '("setoid_rewrite @{orientation} @{term} at @{occs} in @{ident}" . ("gm" . 783))
    '("setoid_replace @{term} with @{term}" . ("gm" . 784))
    '("setoid_replace @{term} with @{term} in @{ident}" . ("gm" . 785))
    '("setoid_replace @{term} with @{term} by @{tactic}" . ("gm" . 785))
    '("setoid_replace @{term} with @{term} using relation @{term}" . ("gm" . 785))
    '("setoid_replace @{term} with @{term} in @{ident} by @{tactic}" . ("gm" . 785))
    '("setoid_replace @{term} with @{term} in @{ident} using relation @{term}" . ("gm" . 785))
    '("setoid_replace @{term} with @{term} using relation @{term} by @{tactic}" . ("gm" . 785))
    '("setoid_replace @{term} with @{term} in @{ident} using relation @{term} by @{tactic}" . ("gm" . 785))
    '("Print Instances @{$$(yas-choose-value '(\"Reflexive\" \"Symmetric\" \"Transitive\" \"Equivalence\" \"PreOrder\" \"PER\" \"Proper\"))}." . ("gn" . 786))
    '("rewrite_strat @{s}" . ("gv" . 787))
    '("rewrite_strat @{s} in @{ident}" . ("gv" . 787))))

(defconst company-coq-abbrevs-AsyncProofs
  (list 
    '("Set Suggest Proof Using." . ("gx" . 788))
    '("Test Suggest Proof Using." . ("gx" . 788))
    '("Unset Suggest Proof Using." . ("gx" . 788))))

(defconst company-coq-abbrevs-Universes
  (list 
    ))

(defconst company-coq-abbrevs-Misc
  (list 
    ))

(defconst company-coq-abbrevs-all
  (list 
    company-coq-abbrevs-RefMan-int company-coq-abbrevs-RefMan-pre company-coq-abbrevs-RefMan-gal company-coq-abbrevs-RefMan-ext company-coq-abbrevs-RefMan-mod company-coq-abbrevs-RefMan-lib company-coq-abbrevs-RefMan-cic company-coq-abbrevs-RefMan-modr company-coq-abbrevs-RefMan-oth company-coq-abbrevs-RefMan-pro company-coq-abbrevs-RefMan-tac company-coq-abbrevs-RefMan-ltac company-coq-abbrevs-RefMan-tacex company-coq-abbrevs-RefMan-decl company-coq-abbrevs-RefMan-syn company-coq-abbrevs-RefMan-sch company-coq-abbrevs-RefMan-com company-coq-abbrevs-RefMan-uti company-coq-abbrevs-RefMan-ide company-coq-abbrevs-AddRefMan-pre company-coq-abbrevs-Cases company-coq-abbrevs-Coercion company-coq-abbrevs-CanonicalStructures company-coq-abbrevs-Classes company-coq-abbrevs-Omega company-coq-abbrevs-Micromega company-coq-abbrevs-Extraction company-coq-abbrevs-Program company-coq-abbrevs-Polynom company-coq-abbrevs-Nsatz company-coq-abbrevs-Setoid company-coq-abbrevs-AsyncProofs company-coq-abbrevs-Universes company-coq-abbrevs-Misc))

(provide 'company-coq-abbrev)
;;; company-coq-abbrev.el ends here
